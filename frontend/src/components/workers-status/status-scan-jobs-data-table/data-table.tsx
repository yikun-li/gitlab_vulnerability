"use client"

import * as React from "react"
import {
  type Table as TanstackTable,
  flexRender
} from "@tanstack/react-table"

import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table"
import { DataTableToolbar } from "./data-table-toolbar"
import { DataTablePagination } from "./data-table-pagination"

interface DataTableProps<TData> {
  table: TanstackTable<TData>
  isError: boolean
  isLoading: boolean
}

const DataTable = <TData,>({
  table,
  isError,
  isLoading,
}: DataTableProps<TData>) => {

  const renderTableBody = () => {
    if (isLoading) {
      return (
        <TableBody>
          <TableRow>
            <TableCell colSpan={table.getAllColumns().length} className="h-24 text-center">
              Loading...
            </TableCell>
          </TableRow>
        </TableBody>
      )
    }
  
    if (isError) {
      return (
        <TableBody>
          <TableRow>
            <TableCell colSpan={table.getAllColumns().length} className="h-24 text-center">
              Error encountered. Please try again later.
            </TableCell>
          </TableRow>
        </TableBody>
      )
    }
  
    if (!table.getRowModel().rows?.length) {
      return (
        <TableBody>
          <TableRow>
            <TableCell colSpan={table.getAllColumns().length} className="h-24 text-center">
            No results.
            </TableCell>
          </TableRow>
        </TableBody>
      )
    }
  
    return (
      <TableBody>
        {table.getRowModel().rows.map((row) => (
          <TableRow
            key={row.id}
            data-state={row.getIsSelected() && "selected"}
          >
            {row.getVisibleCells().map((cell) => (
              <TableCell key={cell.id}>
                {flexRender(cell.column.columnDef.cell, cell.getContext())}
              </TableCell>
            ))}
          </TableRow>
        ))}
      </TableBody>
    )
  }

  return (
    <div className="space-y-4">
      <DataTableToolbar table={table} />
      <div className="rounded-md border">
        <Table>
          <TableHeader>
            {table.getHeaderGroups().map((headerGroup) => (
              <TableRow key={headerGroup.id}>
                {headerGroup.headers.map((header) => {
                  return (
                    <TableHead key={header.id}>
                      {header.isPlaceholder
                        ? null
                        : flexRender(
                            header.column.columnDef.header,
                            header.getContext()
                          )}
                    </TableHead>
                  )
                })}
              </TableRow>
            ))}
          </TableHeader>
            {renderTableBody()}
        </Table>
      </div>
      <DataTablePagination table={table} />
    </div>
  )
}

export { DataTable }
