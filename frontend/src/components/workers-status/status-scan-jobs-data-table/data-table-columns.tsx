"use client"

import Link from "next/link"
import { ColumnDef } from "@tanstack/react-table"
import {
  ArrowUpDown,
  MoreHorizontal,
  ExternalLink,
} from "lucide-react"

import { Button } from "@/components/ui/button"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { IStatusScanJob } from "@/types/workers-status/status-scan-job"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"
import {
  AlertDialog,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog"
import { Separator } from "@/components/ui/separator"


import { TypographyP } from "../../shared/typography/typography-p"
import { JOB_STATUSES_MAP } from "@/constants/workers-status/status-scan-job"
import { TooltipButton } from "@/components/shared/buttons/tooltip-button"

const paginatedStatusScanJobsColumns: ColumnDef<IStatusScanJob>[] = [
  {
    accessorKey: "job_id",
    header: ({ column }) => {
      return (
        <div className="max-w-8">
          <Button
            variant="ghost"
            onClick={() => column.toggleSorting(column.getIsSorted() === "asc")}
          >
            <span className="text-foreground font-normal">ID</span>
            <ArrowUpDown className="ml-2 size-3" />
          </Button>
        </div>
      )
    },
    cell: ({ row }) => {
      return (
        <div className="px-4">
          <TypographyP className="font-mono">
            {row.getValue("job_id")}
          </TypographyP>
        </div>
      )
    }
  },
  {
    id: "gl_job_id",
    accessorKey: "job.gl_job_id",
    header: ({ column }) => {
      return (
        <Button
          variant="ghost"
          onClick={() => column.toggleSorting(column.getIsSorted() === "asc")}
        >
          <span className="text-foreground font-normal">GitLab Job ID</span>
          <ArrowUpDown className="ml-2 size-3" />
        </Button>
      )
    },
    cell: ({ row }) => {
      return (
        <div className="px-4">
          <TypographyP className="font-mono">
            {row.original.job.gl_job_id}
          </TypographyP>
        </div>
      )
    }
  },
  {
    accessorKey: "overall_status",
    header: "Overall Status",
    cell: ({ row }) => {
      const status = JOB_STATUSES_MAP.find(
        (status) => status.value === row.getValue("overall_status")
      )

      if (!status) {
        return null
      }

      return (
        <div className="flex w-[100px] items-center">
          {status.icon && (
            <status.icon className="mr-2 size-4 text-foreground" />
          )}
          <span>{status.label}</span>
        </div>
      )
    },
    filterFn: (row, id, value) => {
      return value.includes(row.getValue(id))
    },
  },
  {
    accessorKey: "db_create_and_save_task",
    header: () => (<p className="text-ellipsis overflow-hidden whitespace-nowrap">Security Report Status</p>),
    cell: ({ row }) => {
      const status = JOB_STATUSES_MAP.find(
        (status) => status.value === row.getValue("db_create_and_save_task")
      )

      if (!status) {
        return null
      }

      return (
        <div className="flex w-[100px] items-center">
          {status.icon && (
            <status.icon className="mr-2 size-4 text-foreground" />
          )}
          <span>{status.label}</span>
        </div>
      )
    }
  },
  {
    id: "actions",
    cell: ({ row }) => {
      const statusScanJob = row.original

      const renderActionMenuButton = () => {
        return (
          <AlertDialog>
            <DropdownMenu>
              <TooltipProvider>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <DropdownMenuTrigger asChild>
                      <Button variant="ghost" className="h-8 w-8 p-0">
                        <span className="sr-only">Open menu</span>
                        <MoreHorizontal className="size-4" />
                      </Button>
                    </DropdownMenuTrigger>
                  </TooltipTrigger>
                  <TooltipContent>
                    <TypographyP>
                      Actions
                    </TypographyP>
                  </TooltipContent>
                </Tooltip>
              </TooltipProvider>
              <DropdownMenuContent align="end">
                <DropdownMenuLabel>Actions</DropdownMenuLabel>
                <DropdownMenuItem
                  onClick={() => navigator.clipboard.writeText(statusScanJob.job_id.toString())}
                >
                  Copy ID
                </DropdownMenuItem>
                <DropdownMenuItem
                  onClick={() => navigator.clipboard.writeText(statusScanJob.job.gl_job_id)}
                >
                  Copy GitLab Job ID
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem asChild>
                  <Link href={`/job/${statusScanJob.job_id}`}>
                    View Job Details
                  </Link>
                </DropdownMenuItem>
                <AlertDialogTrigger asChild>
                  <DropdownMenuItem>View Remarks</DropdownMenuItem>
                </AlertDialogTrigger>
              </DropdownMenuContent>
            </DropdownMenu>
            <AlertDialogContent>
              <AlertDialogHeader>
                <AlertDialogTitle>
                  <p className="scroll-m-20 text-xl font-semibold tracking-tight">
                    {`Job ${statusScanJob.job_id}`}
                  </p>
                </AlertDialogTitle>
                <Separator />
                <AlertDialogDescription className="text-current font-mono">
                  {statusScanJob.remarks !== undefined && statusScanJob.remarks !== "" && statusScanJob.remarks !== null
                    ? statusScanJob.remarks
                    : "No remarks available."
                  }
                </AlertDialogDescription>
              </AlertDialogHeader>
              <AlertDialogFooter>
                <Button variant="link" asChild>
                  <AlertDialogCancel>
                  Close
                  </AlertDialogCancel>
                </Button>
              </AlertDialogFooter>
            </AlertDialogContent>
          </AlertDialog>
        )
      }

      const renderNavigateToJobButton = () => {
        return (
          <TooltipButton
            isIconButton
            icon={ExternalLink}
            tooltipValue={`Navigate to Job ${statusScanJob.job_id}`}
            isLink
            href={`/job/${statusScanJob.job_id}`}
          />
        )
      }
 
      return (
        <div className="flex justify-end whitespace-nowrap">
          <div className="space-x-1">
            {renderNavigateToJobButton()}
            {renderActionMenuButton()}
          </div>
        </div>
      )
    },
  },
]

export { paginatedStatusScanJobsColumns }
