import { cn } from "@/lib/utils"
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card"
import { Separator } from "@/components/ui/separator"
import { 
  TooltipProvider,
  Tooltip,
  TooltipContent,
  TooltipTrigger
} from "@/components/ui/tooltip"

import { IStatusScanJob } from "@/types/workers-status/status-scan-job"
import { SCAN_JOB_TASKS, JOB_STATUSES_MAP } from "@/constants/workers-status/status-scan-job"
import { IJob } from "@/types/detection/job"

interface JobStatusScanJobCardProps extends React.ComponentProps<typeof Card> {
  statusScanJob: IStatusScanJob
}

const JobStatusScanJobCard = ({
  statusScanJob,
  className,
  ...props
}: JobStatusScanJobCardProps) => {
  const renderStatusScanJobTasks = () => {
    const consumeStatus = (value: string | number | IJob | null): string | null => {
      if (typeof value === "string") return value
      return null
    }
    const renderStatusColour = (value: string | null): React.ReactNode => {
      if (value == "not_started" || value == "in_progress" ) return (
        <span className="flex h-2 w-2 translate-y-1 rounded-full bg-amber-500" />
      )
      else if (value == "failure") return (
        <span className="flex h-2 w-2 translate-y-1 rounded-full bg-red-500" />
      )
      else if (value == "success") return (
        <span className="flex h-2 w-2 translate-y-1 rounded-full bg-lime-500" />
      )
      return (
        <span className="flex h-2 w-2 translate-y-1 rounded-full bg-gray-500" />
      )
    }

    const renderStatusValue = (value: string | null): React.ReactNode => {
      if (typeof value === "string") {
        const status = JOB_STATUSES_MAP.find((status) => status.value === value)
  
        if (!status) return null
  
        return (
          <div className="flex w-[100px] items-center">
            {status.icon && (
              <status.icon className="mr-2 h-4 w-4 text-muted-foreground" />
            )}
            <span>{status.label}</span>
          </div>
        )
      }
      return null
    }

    return (
      SCAN_JOB_TASKS.map((task) => {
        const status = consumeStatus(statusScanJob[task.accessor])

        return (
          <div
            key={task.key}
            className="mb-4 grid grid-cols-[25px_minmax(0,_1fr)_40px] items-start pb-4 last:mb-0 last:pb-0"
          >
            {renderStatusColour(status)}
            <div className="space-y-2">
              <p className="text-sm font-medium leading-4 text-ellipsis whitespace-nowrap overflow-hidden">
                {task.label}
              </p>
              <div className="text-sm text-muted-foreground text-ellidivsis whitespace-nowrap overflow-hidden">
                {renderStatusValue(status)}
              </div>
            </div>
            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger className="self-center justify-self-center">
                  <task.responsibilityIcon className="h-4 w-4"/>
                </TooltipTrigger>
                <TooltipContent>
                  {task.description}
                </TooltipContent>
              </Tooltip>
            </TooltipProvider>
          </div>
        )
      })
    )
  }

  return (
    <Card className={cn("w-full", className)} {...props}>
      <CardHeader className="space-y-3">
        <CardTitle>Status</CardTitle>
        <CardDescription className="leading-5">Statuses of all tasks for the job.</CardDescription>
        <Separator />
      </CardHeader>
      <CardContent className="grid gap-4">
        <div>
          {renderStatusScanJobTasks()}
        </div>
      </CardContent>
    </Card>
  )
}

export { JobStatusScanJobCard }
