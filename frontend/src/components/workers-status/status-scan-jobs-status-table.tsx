"use client"

import * as React from "react"
import Link from "next/link"
import { ExternalLink, MoveDown } from "lucide-react"

import { cn } from "@/lib/utils"
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card"
import { Separator } from "@/components/ui/separator"
import {
  Table,
  TableBody,
  TableCell,
  TableRow,
} from "@/components/ui/table"
import { Button } from "@/components/ui/button"
import { ScrollArea } from "@/components/ui/scroll-area"

import { useStatusScanJobsStatusOverallStatus } from "@/hooks/use-status-scan-jobs-overall-status"
import { TypographyP } from "@/components/shared/typography/typography-p"
import { DataBadge } from "@/components/shared/badges/data-badge"
import { JOB_STATUSES_MAP, findTaskDetailsFromStatus } from "@/constants/workers-status/status-scan-job"
import { useRouter } from "next/navigation"
import { SortOrders, TaskStatuses } from "@/types/workers-status/status-scan-job"

interface StatusScanJobsStatusTableProps extends React.ComponentProps<typeof Card> {
  targetStatus: TaskStatuses
  sort: SortOrders
  tableTitle: string
  tableDescription: string
  tableEmptyText: string
  showGlJobId?: boolean
  showTaskAtTargetStatus?: boolean
  showSecurityReportStatus?: boolean
  showRemarks?: boolean
  longPolling?: boolean
}

const StatusScanJobsStatusTable = ({
  tableTitle,
  tableDescription,
  tableEmptyText,
  targetStatus,
  sort,
  showGlJobId = true,
  showTaskAtTargetStatus = true,
  showSecurityReportStatus = true,
  showRemarks = false,
  longPolling = false,
  className,
  ...props
}: StatusScanJobsStatusTableProps) => {
  const { data, isError, isLoading } = useStatusScanJobsStatusOverallStatus(targetStatus, 25, sort, longPolling)
  const [ hoveredJobId, setHoveredJobId ] = React.useState<string>("")
  const router = useRouter()

  const renderLongPollingTableTitle = () => (
    <div className="flex space-x-3">
      <div>{tableTitle}</div>
      <div className="animate-ping-slow inline-flex self-center justify-self-center h-2 w-2 rounded-full bg-cyan-600"></div>
    </div>
  )

  const renderCardHeaderContent = () => {
    const countValue = !isLoading && !isError ? data !== undefined ? data.length : "NA" : "" 

    return (
      <div className="space-y-3">
          <div className="flex justify-between">
          <div className="space-y-3">
            <CardTitle>
              {longPolling && !isLoading
                ? renderLongPollingTableTitle()
                : tableTitle
              }
            </CardTitle>
            <CardDescription className="leading-5">{tableDescription}</CardDescription>
          </div>
          <div className="hidden sm:flex mx-2 my-auto">
            <div className={
              `
                border-current border-dashed border-2 rounded-full size-14 flex my-auto text-center 
                ${isLoading ? "animate-spin-slow" : "" }
                ${isError ? "bg-destructive" : "bg-none"}
              `
            }>
              <TypographyP className="font-mono m-auto">
                {countValue}
              </TypographyP>
            </div>
          </div>
        </div>
        <Separator />
      </div>
    )
  }

  const renderTableBodyContent = () => {
    if (data?.length == 0) {
      return (
        <TableRow>
          <TableCell colSpan={2} className="h-24 text-center">
            {tableEmptyText}
          </TableCell>
        </TableRow>
      )
    }

    if (isError) {
      return (
        <TableRow>
          <TableCell colSpan={2} className="h-24 text-center">
            Error encountered. Please try again later.
          </TableCell>
        </TableRow>
      )
    }

    if (isLoading) {
      return (
        <TableRow>
          <TableCell colSpan={2} className="h-24 text-center">
            <div className="flex justify-center">Loading...</div>
          </TableCell>
        </TableRow>
      )
    }
    if (data !== undefined) {
      return data.map((statusScanJob) => {
        const jobStatus = JOB_STATUSES_MAP.find((status) => status.value == targetStatus)
        const currentTask = findTaskDetailsFromStatus(statusScanJob, targetStatus)
        const securityReportStatus = JOB_STATUSES_MAP.find((status) => status.value == statusScanJob.db_create_and_save_task)

        return (
          <TableRow
            key={statusScanJob.job_id}
            onMouseEnter={() => {setHoveredJobId(statusScanJob.job_id.toString())}}
            onMouseLeave={() => {setHoveredJobId("")}}
            onClick={() => {router.push(`/job/${statusScanJob.job_id}`)}}
            className="hover:cursor-pointer"
          >
            <TableCell className="font-medium font-mono">{statusScanJob.job_id}</TableCell>
            <TableCell className="text-right">
              <div className="space-x-1 sm:space-x-2 space-y-1 sm:space-y-0">
                {showGlJobId
                  ? (<DataBadge
                    badgeTitle={statusScanJob.job.gl_job_id}
                    badgeVariant="default"
                    tooltipValue="GitLab Job ID" />
                  ) : ( <></> )
                }
                {showTaskAtTargetStatus
                  ? (<DataBadge
                      badgeTitle={currentTask?.accessor}
                      badgeVariant={jobStatus?.badgeVariant}
                      tooltipValue={currentTask?.description}
                    /> 
                  ) : ( <></> )
                }
                {showSecurityReportStatus
                  ? (<DataBadge
                      badgeTitle="security_report"
                      badgeVariant={securityReportStatus?.badgeVariant}
                      tooltipValue={
                        <p>Security report generation <span className="font-mono">{securityReportStatus?.value}</span>.</p>
                      }
                    />
                  ) : ( <></> )
                }
                {showRemarks && statusScanJob.remarks !== null
                  ? (<DataBadge
                    badgeTitle="remarks"
                    badgeVariant={"info"}
                    tooltipValue={statusScanJob.remarks}
                  />
                ) : ( <></> )

                }
              </div>  
            </TableCell>
          </TableRow>
        )
      })
    }
  }

  const renderCardFooter = () => {
    let isScrollable = "hidden"
    if (!isLoading && !isError && data !== undefined && data.length > 5) {
      isScrollable = "flex"
    }

    let isViewable = "hidden"
    if (!isLoading && !isError) {
      isViewable = "hidden sm:flex"
    }

    return (
      <CardFooter className={`${isViewable} justify-between`}>
        <div className="text-sm text-muted-foreground">
          {hoveredJobId !== ""
            ? (
              <div className="flex align-middle my-auto">
                <p>Click on the row to view the full details for Job {hoveredJobId}{`\u00A0`}</p>
                <div className="my-auto"><ExternalLink className="w-3 h-3" /></div>
              </div>
            ) : (
              <div>
                <p>Explore all jobs on the           
                  <Button variant="link" asChild className="px-1 py-0 h-0">
                    <Link href="/jobs">Jobs</Link>
                  </Button>page
                </p>
              </div>
            )
          }
        </div>
        <div className={`mx-6 my-4 size-6 text-center`}>
          <MoveDown className={`size-4 m-auto animate-bounce ${isScrollable}`}/>
        </div>
      </CardFooter>
    )
  }

  const renderCardContent = () => {
    if (data !== undefined && data.length > 4) return (
      <CardContent>
        <ScrollArea className="h-64">
          <Table>
            <TableBody>
              {renderTableBodyContent()}
            </TableBody>
          </Table>
        </ScrollArea>
      </CardContent>
    )
    return (
      <CardContent>
        <Table>
          <TableBody>
            {renderTableBodyContent()}
          </TableBody>
        </Table>
      </CardContent>
    )
  }

  return (
    <Card className={cn("w-full", className)} {...props}>
      <CardHeader>
        {renderCardHeaderContent()}
      </CardHeader>
      {renderCardContent()}
      {renderCardFooter()}
    </Card>
  )
}

export { StatusScanJobsStatusTable }
