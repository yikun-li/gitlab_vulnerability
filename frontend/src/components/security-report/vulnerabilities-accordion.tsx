import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion"
import { Separator } from "@/components/ui/separator"

import { DataBadge } from "@/components/shared/badges/data-badge"
import { RemediationsAlert } from "./remediations-alert"
import {
  ILocation,
  IRemediation,
  IVulnerability,
  SeverityLevels,
} from "@/types/report/security-report"
import { SEVERITY_LEVELS_MAP } from "@/constants/report/security-report"
import { VulnerabilityAlert } from "./vulnerability-alert"

interface VulnerabilitiesAccordionProps {
  vulnerabilities: IVulnerability[],
  vulnerabilityRemediationsMap: Record<string, IRemediation[]>,
}

const VulnerabilitiesAccordion = ({
  vulnerabilities,
  vulnerabilityRemediationsMap,
}: VulnerabilitiesAccordionProps) => {

  const renderLocationBadge = (
    location: ILocation,
    severity: SeverityLevels | undefined
  ) => {
    const severityMap = SEVERITY_LEVELS_MAP.find((mapper) => mapper.value == severity)

    return (
      <DataBadge
        badgeTitle={location.file}
        badgeVariant={severityMap !== undefined ? severityMap.badgeVariant : "outline"}
        hoverBadgeContent={
          <>
            <div className="flex justify-between space-x-24">
              <p>Severity</p>
              <p className="font-mono text-ellipsis whitespace-nowrap overflow-hidden">
                {severityMap !== undefined
                  ? severityMap.value
                  : "NA"
                } 
              </p>
            </div>
            <Separator className="my-2" />
            <div className="flex justify-between space-x-24">
              <p>Start line</p>
              <p className="font-mono text-ellipsis whitespace-nowrap overflow-hidden">{location.start_line}</p>
            </div>
            <div className="flex justify-between space-x-24">
              <p>End line</p>
              <p className="font-mono">{location.end_line}</p>
            </div>
            <div className="flex justify-between space-x-24">
              <p>Class name</p>
              <p className="font-mono">
                {location.class_name !== undefined
                  ? location.class_name
                  : "NA"
                }
              </p>
            </div>
            <div className="flex justify-between space-x-24">
              <p>Method name</p>
              <p className="font-mono">
                {location.method_name !== undefined
                  ? location.method_name
                  : "NA"
                }
              </p>
            </div>
          </>
        }
      />
    )
  }

  const renderVulnerabilityAccordionItem = (
    vulnerability: IVulnerability,
    remediations: IRemediation[],
  ) => {
    return (
      <AccordionItem value={vulnerability.id} key={vulnerability.id}>
        <AccordionTrigger className="hover:no-underline">
          <span className="flex gap-2">
            <p className="font-mono leading-6 hover:font-bold">{vulnerability.id}</p>
            <span className="hidden md:block">{renderLocationBadge(vulnerability.location, vulnerability.severity)}</span>
          </span>
        </AccordionTrigger>
        <AccordionContent className="space-y-4">
          <VulnerabilityAlert vulnerability={vulnerability} />
          <RemediationsAlert remediations={remediations} />
        </AccordionContent>
      </AccordionItem>
    )
  }

  return (
    <Accordion type="multiple">
      {vulnerabilities.map((vulnerability) => (
        renderVulnerabilityAccordionItem(vulnerability, vulnerabilityRemediationsMap[vulnerability.id])
      ))}
    </Accordion>
  )
}

export { VulnerabilitiesAccordion }
