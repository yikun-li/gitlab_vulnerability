import * as React from "react"
import { ChevronLeft, ChevronRight, Loader, MoreHorizontal } from "lucide-react"

import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"
import { Button } from "@/components/ui/button"

import { useStatusScanJobExists } from "@/hooks/use-status-scan-job-exists"
import { TooltipButton } from "../shared/buttons/tooltip-button"
import { GET_FULL_REPORT_BY_QUERY_ID, GET_GL_REPORT_BY_QUERY_ID } from "@/constants/api/security-report"

interface SecurityReportNavigationUtilitiesProps {
  dbJobId: string
}

const SecurityReportNavigationUtilities = ({
  dbJobId
}: SecurityReportNavigationUtilitiesProps) => {
  const prevId = `${Number(dbJobId) - 1}`
  const nextId = `${Number(dbJobId) + 1}`
  const [isDownloading, setIsDownloading] = React.useState<boolean>(false)
  const {
    statusScanJobExists: nextStatusScanJobExists,
    isError: isNextStatusScanJobExistsError,
    isLoading: isNextStatusScanJobExistsLoading
  } = useStatusScanJobExists({ dbJobId: nextId })
  const {
    statusScanJobExists: prevStatusScanJobExists,
    isError: isPrevStatusScanJobExistsError,
    isLoading: isPrevStatusScanJobExistsLoading
  } = useStatusScanJobExists({ dbJobId: prevId })

  const query = `?db_job_id=${dbJobId}`
  const fullReportApiUrl = `${GET_FULL_REPORT_BY_QUERY_ID}${query}`
  const glReportApiUrl = `${GET_GL_REPORT_BY_QUERY_ID}${query}`

  const downloadSecurityReport = (apiUrl: string) => {
    setIsDownloading(true)
    fetch(apiUrl)
      .then(response => {
        if (!response.ok) {
          console.log("failed")
        }
        return response.blob()
      })
      .then(blob => blob.text())
      .then(text => {
        const reportJsonObject = JSON.parse(text)
        const prettyJsonObject = JSON.stringify(reportJsonObject, null, 2)
        const prettyBlob = new Blob([prettyJsonObject], { type: 'application/json' })
        const url = window.URL.createObjectURL(prettyBlob)
        const link = document.createElement('a')
        link.href = url
        link.setAttribute("download", "security_report.json")
        document.body.appendChild(link)
        link.click()
        link.parentNode?.removeChild(link)
        window.URL.revokeObjectURL(url)
        setIsDownloading(false)
      })
  }

  const renderDownloadOptions = () => {
    return (
      <DropdownMenu>
        <TooltipProvider>
          <Tooltip>
            <TooltipTrigger asChild>
              <DropdownMenuTrigger asChild>
                <Button variant="outline" className="size-8 p-0" disabled={isDownloading}>
                  {isDownloading
                    ? <Loader className="animate-spin-slow size-4" />
                    : <MoreHorizontal className="size-4" />
                  }
                </Button>
              </DropdownMenuTrigger>
            </TooltipTrigger>
            <TooltipContent>
              Download options
            </TooltipContent>
          </Tooltip>
        </TooltipProvider>
        <DropdownMenuContent>
          <DropdownMenuLabel>Download</DropdownMenuLabel>
          <DropdownMenuItem 
            onClick={() => {downloadSecurityReport(fullReportApiUrl)}}
            disabled={isDownloading}
          >Full Report</DropdownMenuItem>
          <DropdownMenuItem
            onClick={() => {downloadSecurityReport(glReportApiUrl)}}
            disabled={isDownloading}
          >GL Artifact Report</DropdownMenuItem>
        </DropdownMenuContent>
      </DropdownMenu>
    )
  }

  return (
    <div className="flex space-x-1 my-auto">
      {renderDownloadOptions()}
      <TooltipButton
        tooltipValue="Navigate to the previous job"
        isIconButton
        icon={ChevronLeft}
        isLink
        href={`/job/${prevId}`}
        disabled={!prevStatusScanJobExists || isPrevStatusScanJobExistsLoading || isPrevStatusScanJobExistsError}
        buttonVariant="outline"
      />
      <TooltipButton
        tooltipValue="Navigate to the next job"
        isIconButton
        icon={ChevronRight}
        isLink
        href={`/job/${nextId}`}
        disabled={!nextStatusScanJobExists || isNextStatusScanJobExistsLoading || isNextStatusScanJobExistsError}
        buttonVariant="outline"
      />
    </div>
  )
}

export { SecurityReportNavigationUtilities }
