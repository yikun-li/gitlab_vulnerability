import { 
  CardContent
} from "@/components/ui/card"
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion"

import { DataBadge } from "@/components/shared/badges/data-badge"
import { IFullSecurityReport, IRemediation } from "@/types/report/security-report"
import { SCAN_STATUS_MAP } from "@/constants/report/security-report"
import { VulnerabilitiesAccordion } from "./vulnerabilities-accordion"

interface SecurityReportDataCardContentProps extends React.ComponentProps<typeof CardContent> {
  securityReport: IFullSecurityReport
}

const SecurityReportDataCardContent = ({
  securityReport,
}: SecurityReportDataCardContentProps) => {
  
  const renderBadgePropertyPair = (
    label: string,
    value: string | undefined,
    badgeVariant: "success" | "info" | "secondary" | "destructive" | "default",
   ) => {
     return (
       <div className="flex justify-between align-middle gap-4 max-[425px]:block">
         <p className="my-auto">{label}</p>
         <div className="max-[425px]:flex max-[425px]:my-2">
            <DataBadge
              badgeTitle={value}
              badgeVariant={badgeVariant}
            />
         </div>
       </div>
     )
   }

  const renderReportMetadataAccordionItem = () =>{
    const renderReportSchemaBadge = () => {
      const schemaUrlParts = securityReport?.report_schema !== undefined
        ? securityReport?.report_schema.split('/')
        : []

      return (
        <div className="flex justify-between align-middle gap-4 max-[425px]:block">
          <p className="my-auto">Report Schema</p>
          <div className="max-[425px]:flex max-[425px]:my-2">
            <DataBadge
              badgeTitle={schemaUrlParts[schemaUrlParts.length - 1]}
              badgeVariant="info"
              hoverBadgeContent={
                <div className="flex justify-between space-x-24">
                  <p>URL</p>
                  <p className="font-mono text-ellipsis whitespace-nowrap overflow-hidden">{securityReport?.report_schema}</p>
                </div>
              }
            />
          </div>
        </div>
      )
    }

    return (
      <AccordionItem value="report-metadata">
        <AccordionTrigger><p className="font-mono">Report Metadata</p></AccordionTrigger>
        <AccordionContent>
          <div className="space-y-2">
            {renderBadgePropertyPair("ID", securityReport.id, "default")}
            {renderBadgePropertyPair("Version", securityReport.version, "default")}
            {renderReportSchemaBadge()}
            {renderBadgePropertyPair("Created", securityReport.created_at, "default")}
            {renderBadgePropertyPair("Updated", securityReport.updated_at, "default")}
          </div>
        </AccordionContent>
      </AccordionItem>
    )
  }

  const renderScanAccordionItem = () => {
    const scanStatus = SCAN_STATUS_MAP.find((status) => status.value == securityReport.scan.status)

    const renderScanFacility = (
      facility: "Scanner" | "Analyzer",
      name: string,
      id: string,
      version: string,
      vendor: string
    ) => (
      <div className="flex justify-between align-middle gap-4 max-[425px]:block">
        <p className="my-auto">{facility}</p>
        <div className="max-[425px]:flex max-[425px]:my-2">
          <DataBadge
            badgeTitle={name}
            badgeVariant="info"
            hoverBadgeContent={
              <>
                <div className="flex justify-between space-x-24">
                  <p>ID</p>
                  <p className="font-mono text-ellipsis whitespace-nowrap overflow-hidden">{id}</p>
                </div>
                <div className="flex justify-between space-x-24">
                  <p>Version</p>
                  <p className="font-mono">{version}</p>
                </div>
                <div className="flex justify-between space-x-24">
                  <p>Vendor</p>
                  <p className="font-mono">{vendor}</p>
                </div>
              </>
            }
          />
        </div>
      </div>
    )

    return (
      <AccordionItem value="scan-metadata">
        <AccordionTrigger><p className="font-mono">Scan Metadata</p></AccordionTrigger>
        <AccordionContent>
          <div className="space-y-2">
            {renderBadgePropertyPair("Scan status", scanStatus?.renderValue, scanStatus ? scanStatus.badgeVariant : "secondary")}
            {renderBadgePropertyPair("Start time", securityReport.scan.start_time.replace("T", " "), "default")}
            {renderBadgePropertyPair("End time", securityReport.scan.end_time.replace("T", " "), "default")}
            {renderBadgePropertyPair("Type", securityReport.scan.type.toUpperCase(), "default")}
            {renderScanFacility(
              "Analyzer",
              securityReport.scan.analyzer.name,
              securityReport.scan.analyzer.id,
              securityReport.scan.analyzer.version,
              securityReport.scan.analyzer.vendor.name
            )}
            {renderScanFacility(
              "Scanner",
              securityReport.scan.scanner.name,
              securityReport.scan.scanner.id,
              securityReport.scan.scanner.version,
              securityReport.scan.scanner.vendor.name
            )}
          </div>
        </AccordionContent>
      </AccordionItem>
    )
  }

  const renderVulnerabilitiesAccordionItem = () => {
    const vulnerabilityRemediationsMap = {} as Record<string, IRemediation[]>
    if (securityReport.remediations !== undefined) {
      securityReport.remediations.reduce((remediationsMap, remediation) => {
        remediation.fixes.forEach(fix => {
          if (!remediationsMap[fix.id]) {
            remediationsMap[fix.id] = []
          }
          remediationsMap[fix.id].push(remediation)
        })
        return remediationsMap
      }, vulnerabilityRemediationsMap)
    }

    return (
      <AccordionItem value="vulnerabilities">
        <AccordionTrigger><p className="font-mono">Vulnerabilities</p></AccordionTrigger>
        <AccordionContent>
          <div className="space-y-2 px-3">
            <VulnerabilitiesAccordion 
              vulnerabilities={securityReport.vulnerabilities} 
              vulnerabilityRemediationsMap={vulnerabilityRemediationsMap}/>
          </div>
        </AccordionContent>
      </AccordionItem>
    )
  }
  
  return (
    <>
      <Accordion type="multiple" defaultValue={[
        "report-metadata",
        "scan-metadata",
        "vulnerabilities",
      ]}>
        {renderReportMetadataAccordionItem()}
        {renderScanAccordionItem()}
        {renderVulnerabilitiesAccordionItem()}
      </Accordion>
    </>
  )
}

export default SecurityReportDataCardContent
