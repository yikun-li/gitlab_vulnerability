import { cn } from "@/lib/utils"
import { Badge } from "@/components/ui/badge"
import {
  HoverCard,
  HoverCardContent,
  HoverCardTrigger,
} from "@/components/ui/hover-card"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"
import Link from "next/link"
import { ExternalLink } from "lucide-react"

interface DataBadgeProps extends React.HTMLAttributes<HTMLDivElement> {
  badgeTitle: string | undefined
  badgeLink?: string | undefined
  badgeVariant?: "success" | "info" | "secondary" | "destructive" | "default" | "outline" | "warning"
  hoverBadgeContent?: React.ReactNode
  tooltipValue?: string | undefined | React.ReactNode
}

const DataBadge = ({
  badgeTitle,
  badgeLink = undefined,
  badgeVariant = "default",
  hoverBadgeContent = undefined,
  tooltipValue = undefined,
  className,
  ...props
}: DataBadgeProps) => {
  const renderBadge = () => {
    const badgeClass = ["text-center text-ellipsis whitespace-nowrap overflow-hidden"]
    if (hoverBadgeContent !== undefined || tooltipValue !== undefined) {
      badgeClass.push("border-dashed border-black")
    }

    if (badgeLink !== undefined) {
      return (
        <Link href={badgeLink} target="_blank">
          <Badge variant={badgeVariant} className={cn(badgeClass, className)}>
            {badgeTitle}{`\u00A0`}<ExternalLink className="w-3 h-3" />
          </Badge>
        </Link>
      )
    }

    return (
      <Badge variant={badgeVariant} className={cn(badgeClass, className)}>
        {badgeTitle}
      </Badge>
    )
  }

  if (hoverBadgeContent !== undefined) {
    return (
      <HoverCard>
        <HoverCardTrigger>
          {renderBadge()}
        </HoverCardTrigger>
        <HoverCardContent className="w-max max-sm:max-w-48">
          {hoverBadgeContent}
        </HoverCardContent>
      </HoverCard>
    )
  }

  if (tooltipValue !== undefined) {
    return (
      <TooltipProvider>
        <Tooltip>
          <TooltipTrigger>
            {renderBadge()}
          </TooltipTrigger>
          <TooltipContent>
            {tooltipValue}
          </TooltipContent>
        </Tooltip>
      </TooltipProvider>
    )
  }
  
  return (
    renderBadge()
  )  
}

export { DataBadge }
