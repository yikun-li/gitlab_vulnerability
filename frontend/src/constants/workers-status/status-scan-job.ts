import { 
  LucideIcon,
  Circle,
  TimerIcon,
  CircleCheck,
  CircleAlert,
  DatabaseIcon,
  GitlabIcon,
} from "lucide-react"

import { IStatusScanJob, TaskStatuses } from "@/types/workers-status/status-scan-job"

interface IJobStatusesMap {
  value: string,
  label: string, 
  icon: LucideIcon,
  badgeVariant: "success" | "info" | "secondary" | "destructive" | "default" | "outline" | "warning"
}

const JOB_STATUSES_MAP: IJobStatusesMap[] = [
  {
    value: "not_started",
    label: "Not started",
    icon: Circle,
    badgeVariant: "secondary",
  },
  {
    value: "in_progress",
    label: "In progress",
    icon: TimerIcon,
    badgeVariant: "warning",
  },
  {
    value: "success",
    label: "Success",
    icon: CircleCheck,
    badgeVariant: "success",
  },
  {
    value: "failure",
    label: "Failure",
    icon: CircleAlert,
    badgeVariant: "destructive"
  },
]

type IScanJobTasksKey = keyof IStatusScanJob

interface IScanJobTasksAccessor {
  key: number,
  accessor: IScanJobTasksKey,
  label: string,
  description: string,
  responsibilityIcon: LucideIcon,
}

const SCAN_JOB_TASKS: IScanJobTasksAccessor[] = [
  {
    key: 1,
    accessor: "db_get_job_task",
    label: "Saved Job Retrieval",
    description: "Server side retrieval of the previously saved job.",
    responsibilityIcon: DatabaseIcon,
  },
  {
    key: 2,
    accessor: "gitlab_get_related_files_task",
    label: "Retrieve Relevant Files",
    description: "Retrieval of files from GitLab based on diffs from the commit.",
    responsibilityIcon: GitlabIcon,
  },
  {
    key: 3,
    accessor: "scan_run_task",
    label: "Security Scan",
    description: "Scanning files on the server to determine code vulnerabilities and any remediations.",
    responsibilityIcon: DatabaseIcon,
  },
  {
    key: 4,
    accessor: "db_create_and_save_task",
    label: "Generate and Save Report",
    description: "Generation of security report on server based on vulnerabilities and remediations identified.",
    responsibilityIcon: DatabaseIcon,
  },
  {
    key: 5,
    accessor: "gitlab_trigger_job_task",
    label: "Trigger Artifact Retrieval",
    description: "Triggering of follow up job on GitLab to retrieve furnished security report on server.",
    responsibilityIcon: GitlabIcon,
  },
]

const findTaskDetailsFromStatus = (statusScanJob: IStatusScanJob, status: TaskStatuses): IScanJobTasksAccessor | undefined => {
  const targetTask = (Object.entries(statusScanJob) as [keyof IStatusScanJob, any][])
    .find(([_, value]) => value === status)?.[0];

  if (targetTask) {
    const taskDetails = SCAN_JOB_TASKS.find(task => task.accessor === targetTask);
    return taskDetails || undefined;
  }

  return undefined;
}

export { type IJobStatusesMap, JOB_STATUSES_MAP, SCAN_JOB_TASKS, findTaskDetailsFromStatus }
