import * as React from "react"
import useSWR from "swr";

import {
  type ColumnFiltersState,
  type PaginationState
} from "@tanstack/react-table"

import { fetcher } from "@/lib/fetcher";

import { IPaginatedResponse } from "@/types/api/paginated-response";
import { IStatusScanJob } from "@/types/workers-status/status-scan-job";
import { GET_ALL_PAGINATED_SCAN_JOBS } from "@/constants/api/workers-status";
import { JOB_STATUSES_MAP } from "@/constants/workers-status/status-scan-job";

const usePaginatedStatusScanJobs = () => {
  const [{ pageIndex, pageSize }, setPagination] = React.useState<PaginationState>({
    pageIndex: 0,
    pageSize: 10,
  })
  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([]) 
  const pagination = React.useMemo(
    () => ({
      pageIndex,
      pageSize,
    }),
    [pageIndex, pageSize]
  )

  React.useEffect(() => {
    setPagination((prev) => ({
      ...prev,
      pageIndex: 0
    }))
  }, [columnFilters])

  const query = new URLSearchParams({})
  query.append("page", `${pageIndex + 1}`)
  query.append("size", `${pageSize}`)

  const filterQuery = columnFilters.map((columnFilter) => {
    if (Array.isArray(columnFilter.value)) {
      return columnFilter.value.map((value) => `${columnFilter.id}=${value}`).join("&")
    } else if (typeof columnFilter.value === "string" || typeof columnFilter.value === "number") {
      return `${columnFilter.id}=${columnFilter.value}`
    } else {
      return ""
    }
  }).filter(Boolean).join("&")

  const { data, error, isLoading } = useSWR<IPaginatedResponse<IStatusScanJob>>(
    `${GET_ALL_PAGINATED_SCAN_JOBS}?${query}&${filterQuery}`,
    fetcher,
  )

  return {
    data,
    isError: error,
    isLoading,
    pagination,
    setPagination,
    columnFilters,
    setColumnFilters,
  }
}

export { usePaginatedStatusScanJobs }
