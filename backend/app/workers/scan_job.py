from sqlalchemy.orm import Session

from app.database.db import SessionLocal
from app.database.crud.detection import get_job_by_db_job_id
from app.database.crud.workers_status import create_status_scan_job, update_status_scan_job_by_db_job_id
from app.database.schemas.workers_status import (
    StatusScanJobCreate as StatusCreate,
    StatusScanJobUpdate as StatusUpdate,
    StatusScanJob
)
from app.database.schemas.detection import Job as JobSchema
from app.internal import gitlab
from app.internal import model
from app.internal import report
from app.workers.dependency import contextual_get_db


async def start(
        db_job_id: int,
        session: Session = SessionLocal
) -> bool:
    db_job, db_status_scan_job, success, files = None, None, False, None
    with contextual_get_db(session=session) as db:
        db_job = get_job_by_db_job_id(db=db, db_job_id=db_job_id)
        if db_job is None:
            db_status_scan_job = create_status_scan_job(
                db=db,
                status_scan_job=StatusCreate(
                    job_id=db_job_id,
                    db_get_job_task="failure",
                    overall_status="failure",
                    remarks="no job retrieved from database"
                )
            )
            return False

        db_job = JobSchema.model_validate(db_job)
        db_status_scan_job = create_status_scan_job(
            db=db,
            status_scan_job=StatusCreate(
                job_id=db_job_id,
                db_get_job_task="success",
                overall_status="in_progress",
                gitlab_get_related_files_task="in_progress",
            )
        )

    success, files = await gitlab.get_related_files(
        gl_project_id=db_job.gl_project_id,
        gl_commit_sha=db_job.gl_commit_sha,
        diff=db_job.diff
    )
    with contextual_get_db(session=session) as db:
        if not success:
            update_status_scan_job_by_db_job_id(
                db=db,
                status_scan_job=StatusUpdate(
                    gitlab_get_related_files_task="failure",
                    overall_status="failure",
                    remarks="failed to retrieve relevant files from gitlab",
                ),
                db_job_id=db_job_id
            )
            return False
        update_status_scan_job_by_db_job_id(
            db=db,
            status_scan_job=StatusUpdate(
                gitlab_get_related_files_task="success",
                scan_run_task="in_progress"
            ),
            db_job_id=db_job_id
        )

    success, start_time, end_time, scanner_metadata, analyzer_metadata, vulnerabilities, remediations = await model.run(
        files=files)
    with contextual_get_db(session=session) as db:
        if not success:
            update_status_scan_job_by_db_job_id(
                db=db,
                status_scan_job=StatusUpdate(
                    scan_run_task="failure",
                    overall_status="failure",
                    remarks="failed to run model"
                ),
                db_job_id=db_job_id
            )
            return False
        update_status_scan_job_by_db_job_id(
            db=db,
            status_scan_job=StatusUpdate(
                scan_run_task="success",
                db_create_and_save_task="in_progress"
            ),
            db_job_id=db_job_id
        )

    db_report = None
    success, db_report = await report.create_and_save(
        db=db,
        success=success,
        start_time=start_time,
        end_time=end_time,
        analyzer_metadata=analyzer_metadata,
        scanner_metadata=scanner_metadata,
        vulnerabilities=vulnerabilities,
        remediations=remediations,
        gl_job_id=db_job.gl_job_id
    )

    with contextual_get_db(session=session) as db:
        if not success:
            update_status_scan_job_by_db_job_id(
                db=db,
                status_scan_job=StatusUpdate(
                    db_create_and_save_task="failure",
                    overall_status="failure",
                    remarks="failed to generate and save security report"
                ),
                db_job_id=db_job_id
            )
            return False
        update_status_scan_job_by_db_job_id(
            db=db,
            status_scan_job=StatusUpdate(
                db_create_and_save_task="success",
                gitlab_trigger_job_task="in_progress"
            ),
            db_job_id=db_job_id
        )

    success = await gitlab.trigger_job(
        gl_project_id=db_job.gl_project_id,
        gl_pipeline_id=db_job.gl_pipeline_id,
        gl_job_id=db_job.gl_job_id
    )
    with contextual_get_db(session=session) as db:
        if not success:
            update_status_scan_job_by_db_job_id(
                db=db,
                status_scan_job=StatusUpdate(
                    gitlab_trigger_job_task="failure",
                    overall_status="failure",
                    remarks="failed to trigger artifact retrieval job in gitlab"
                ),
                db_job_id=db_job_id
            )
            return False
        update_status_scan_job_by_db_job_id(
            db=db,
            status_scan_job=StatusUpdate(
                gitlab_trigger_job_task="success",
                overall_status="success",
            ),
            db_job_id=db_job_id
        )

    return True
