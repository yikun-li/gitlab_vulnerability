from typing import Optional
from fastapi import APIRouter, Depends, HTTPException
from fastapi.responses import JSONResponse
from fastapi.encoders import jsonable_encoder
from sqlalchemy.orm import Session
from starlette.status import (
    HTTP_200_OK,
    HTTP_400_BAD_REQUEST,
    HTTP_404_NOT_FOUND,
)

from app.database.dependency import get_db
from app.database.crud import report as crud
from app.database.schemas import report_base as base_schemas
from app.database.schemas import report_full as full_schemas

REPORT_API_PREFIX = "/report"

router = APIRouter(
    prefix=REPORT_API_PREFIX,
    tags=["Report"],
    responses={
        HTTP_404_NOT_FOUND: {"detail": "Not found"}
    },
)


@router.get("/gl/get_by_query_id", response_model=base_schemas.SecurityReport, response_model_exclude_none=True,
            status_code=HTTP_200_OK)
async def get_gl_report_by_query_id(gl_job_id: Optional[str] = None, db_job_id: Optional[int] = None,
                                    db: Session = Depends(get_db)):
    """Provides a GitLab conformant report artifact for consumption on the GitLab severs.
    """
    if gl_job_id is None and db_job_id is None:
        raise HTTPException(status_code=HTTP_400_BAD_REQUEST,
                            detail=f"Please provide either a GitLab job id or a database job id")
    db_report = crud.get_gl_report_by_query_id(db=db, gl_job_id=gl_job_id, db_job_id=db_job_id)
    if db_report is None:
        if gl_job_id is None:
            raise HTTPException(status_code=HTTP_404_NOT_FOUND,
                                detail=f"Security report with job id {db_job_id} not found")
        raise HTTPException(status_code=HTTP_404_NOT_FOUND,
                            detail=f"Security report with GitLab job id {gl_job_id} not found")
    return db_report


@router.get("/full/get_by_query_id", response_model=full_schemas.SecurityReport, response_model_exclude_none=True,
            status_code=HTTP_200_OK)
async def get_full_report_by_query_id(gl_job_id: Optional[str] = None, db_job_id: Optional[int] = None,
                                      db: Session = Depends(get_db)):
    """Provides the full report data that we capture on our servers and all its respective associations.
    """
    if gl_job_id is None and db_job_id is None:
        raise HTTPException(status_code=HTTP_400_BAD_REQUEST,
                            detail=f"Please provide either a GitLab job id or a database job id")
    db_report = crud.get_full_report_by_query_id(db=db, gl_job_id=gl_job_id, db_job_id=db_job_id)
    if db_report is None:
        if gl_job_id is None:
            raise HTTPException(status_code=HTTP_404_NOT_FOUND,
                                detail=f"Security report with job id {db_job_id} not found")
        raise HTTPException(status_code=HTTP_404_NOT_FOUND,
                            detail=f"Security report with GitLab job id {gl_job_id} not found")
    return db_report
