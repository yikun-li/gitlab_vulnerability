from typing import Optional, Union
from typing_extensions import Annotated
from fastapi import APIRouter, Depends, HTTPException, Query
from sqlalchemy import select
from sqlalchemy.orm import Session
from starlette.status import (
  HTTP_200_OK,
  HTTP_400_BAD_REQUEST,
  HTTP_404_NOT_FOUND,
)
from fastapi_pagination import paginate
from fastapi_pagination.links import Page
from fastapi_pagination.utils import disable_installed_extensions_check

from app.database.dependency import get_db
from app.database.schemas import workers_status as schemas
from app.database.models import workers_status as models
from app.database.crud import workers_status as crud

WORKERS_STATUS_API_PREFIX = "/workers_status"

router = APIRouter(
  prefix=WORKERS_STATUS_API_PREFIX,
  tags=["Worker Status"],
  responses={
    HTTP_404_NOT_FOUND: {"detail": "Not found"}
  }
)

@router.get("/all/paginated", response_model=Page[schemas.StatusScanJob])
async def get_paginated_status_scan_jobs(
  overall_status: Annotated[list[schemas.TaskStatuses], Query()] = None,
  sort: crud.SortOrders = None,
  db: Session = Depends(get_db)
):
  disable_installed_extensions_check()
  return paginate(crud.get_all_status_scan_jobs_by_overall_status(db=db, overall_status=overall_status, sort=sort))

@router.get("/all/overall_status", response_model=list[schemas.StatusScanJob])
def get_all_status_scan_jobs_by_overall_status(
  overall_status: schemas.TaskStatuses,
  limit: Optional[int] = 25,
  sort: crud.SortOrders = None,
  db: Session = Depends(get_db)
):
  db_status_scan_jobs = crud.get_all_status_scan_jobs_by_overall_status(
    db=db,
    overall_status=[overall_status],
    limit=limit,
    sort=sort
  )
  return db_status_scan_jobs

@router.get("/get_by_db_job_id/{db_job_id}", response_model=schemas.StatusScanJob, status_code=HTTP_200_OK)
async def get_status_scan_job_by_db_job_id(db_job_id: int, db: Session = Depends(get_db)):
  db_status_scan_job = crud.get_status_scan_job_by_db_job_id(db=db, db_job_id=db_job_id)
  if db_status_scan_job is None:
    raise HTTPException(status_code=HTTP_404_NOT_FOUND, detail=f"Scan job's status for job id {db_job_id} not found")
  return db_status_scan_job

@router.get("/get_by_gl_job_id/{gl_job_id}", response_model=schemas.StatusScanJob, status_code=HTTP_200_OK)
async def get_status_scan_job_by_gl_job_id(gl_job_id: str, db: Session = Depends(get_db)):
  db_status_scan_job = crud.get_status_scan_job_by_gl_job_id(db=db, gl_job_id=gl_job_id)
  if db_status_scan_job is None:
    raise HTTPException(status_code=HTTP_404_NOT_FOUND, detail=f"Scan job's status for job with GitLab job id {gl_job_id} not found")
  return db_status_scan_job

@router.get("/check_exists_by_query_id", response_model=bool, status_code=HTTP_200_OK)
async def check_status_scan_job_exists_by_query_id(gl_job_id: Optional[str] = None, db_job_id: Optional[int] = None, db: Session = Depends(get_db)):
  if gl_job_id is None and db_job_id is None:
    raise HTTPException(status_code=HTTP_400_BAD_REQUEST, detail=f"Please provide either a GitLab job id or a database job id")
  return crud.check_status_scan_job_exists_by_query_id(db=db, gl_job_id=gl_job_id, db_job_id=db_job_id)
