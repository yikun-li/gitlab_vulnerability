import uuid
from sqlalchemy import Column, String, Integer, ForeignKey, Enum, DateTime, Table
from sqlalchemy.orm import relationship
from sqlalchemy.dialects.postgresql import UUID

from app.database.db import Base
from app.database.models import mixin

class Communication(Base):
  __tablename__ = 'communications'
  id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
  level = Column(Enum("info", "warn", "fatal", name="communication_levels"))
  value = Column(String, nullable=False)
  
  scan_id = Column(UUID(as_uuid=True), ForeignKey('scans.id'))
  scan = relationship("Scan", back_populates="messages")

class ConfigurationOption(Base):
  __tablename__ = 'configuration_options'
  id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
  name = Column(String, nullable=False)
  value = Column(String, nullable=True)
  source = Column(Enum("argument", "file", "env_variable", "other", name="config_sources"), nullable=True)

  scan_id = Column(UUID(as_uuid=True), ForeignKey('scans.id'))
  scan = relationship("Scan", back_populates="options")

class Vendor(Base):
  __tablename__ = 'vendors'
  id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
  name = Column(String, nullable=False, unique=True)

  analyzers = relationship("Analyzer", back_populates="vendor")
  scanners = relationship("Scanner", back_populates="vendor")
  cvss_vectors = relationship("CVSSVector", back_populates="vendor")

class Analyzer(Base):
  __tablename__ = 'analyzers'
  id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
  name = Column(String, nullable=False)
  version = Column(String, nullable=False)
  url = Column(String, nullable=True)

  vendor_id = Column(UUID(as_uuid=True), ForeignKey('vendors.id'))
  vendor = relationship("Vendor", back_populates="analyzers")
  scans = relationship("Scan", back_populates="analyzer")

class Scanner(Base):
  __tablename__ = 'scanners'
  id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
  name = Column(String, nullable=False)
  version = Column(String, nullable=False)
  url = Column(String, nullable=True)

  vendor_id = Column(UUID(as_uuid=True), ForeignKey('vendors.id'))
  vendor = relationship("Vendor", back_populates="scanners")
  scans = relationship("Scan", back_populates="scanner")

vulnerability_identifier_association = Table(
  'vulnerability_identifier_association',
  Base.metadata,
  Column("identifiers_id", ForeignKey("identifiers.id"), primary_key=True),
  Column("vulnerabilities_id", ForeignKey("vulnerabilities.id"), primary_key=True)
)

class Identifier(Base):
  __tablename__ = 'identifiers'
  id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
  type = Column(String, nullable=False)
  name = Column(String, nullable=False)
  value = Column(String, nullable=False)
  url = Column(String, nullable=True)
  
  scan_id = Column(UUID(as_uuid=True), ForeignKey('scans.id'), nullable=True)
  scan = relationship("Scan", back_populates="primary_identifiers")
  vulnerabilities = relationship("Vulnerability", secondary=vulnerability_identifier_association, back_populates="identifiers")

vulnerability_cvss_vector_association = Table(
  'vulnerability_cvss_vector_association',
  Base.metadata,
  Column("cvss_vectors_id", ForeignKey("cvss_vectors.id"), primary_key=True),
  Column("vulnerabilities_id", ForeignKey("vulnerabilities.id"), primary_key=True),
)

class CVSSVector(Base):
  __tablename__ = 'cvss_vectors'
  id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
  vector = Column(String, nullable=False)

  vendor_name = Column(String, ForeignKey('vendors.name'))
  vendor = relationship("Vendor", back_populates="cvss_vectors")
  vulnerabilities = relationship("Vulnerability", secondary=vulnerability_cvss_vector_association, back_populates="cvss_vectors")

vulnerability_link_association = Table(
  'vulnerability_link_association',
  Base.metadata,
  Column("links_id", ForeignKey("links.id"), primary_key=True),
  Column("vulnerabilities_id", ForeignKey("vulnerabilities.id"), primary_key=True),
)

class Link(Base):
  __tablename__ = 'links'
  id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
  url = Column(String, nullable=False)
  name = Column(String, nullable=True)

  vulnerabilities = relationship("Vulnerability", secondary=vulnerability_link_association, back_populates="links")

class Location(Base):
  __tablename__ = 'locations'
  id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
  file = Column(String, nullable=True)
  start_line = Column(Integer, nullable=True)
  end_line = Column(Integer, nullable=True)
  class_name = Column(String, nullable=True) 
  method_name = Column(String, nullable=True)

  vulnerability_id = Column(UUID(as_uuid=True), ForeignKey('vulnerabilities.id'))
  vulnerability = relationship("Vulnerability", back_populates="location")

class Flag(Base):
  __tablename__ = 'flags'
  id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
  type = Column(Enum("flagged-as-likely-false-positive", name="flag_types"))
  origin = Column(String, nullable=False)
  description = Column(String, nullable=False)

  vulnerability_id = Column(UUID(as_uuid=True), ForeignKey('vulnerabilities.id'))
  vulnerability = relationship("Vulnerability", back_populates="flags")

class Vulnerability(Base):
  __tablename__ = 'vulnerabilities'
  id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
  name = Column(String, nullable=True)
  description = Column(String, nullable=True, default='')
  severity = Column(Enum("Info", "Unknown", "Low", "Medium", "High", "Critical", name="severity_levels"), nullable=True)
  solution = Column(String, nullable=True)
  raw_source_code_extract = Column(String, nullable=True)

  security_report_id = Column(UUID(as_uuid=True), ForeignKey('security_reports.id'))
  security_report = relationship("SecurityReport", back_populates="vulnerabilities")
  
  identifiers = relationship("Identifier", secondary=vulnerability_identifier_association, back_populates="vulnerabilities")
  links = relationship("Link", secondary=vulnerability_link_association, back_populates="vulnerabilities")
  location = relationship("Location", back_populates="vulnerability", uselist=False)
  flags = relationship("Flag", back_populates="vulnerability")
  vulnerability_identifier = relationship("VulnerabilityIdentifier", back_populates="vulnerability", uselist=False)
  cvss_vectors = relationship("CVSSVector", secondary=vulnerability_cvss_vector_association, back_populates="vulnerabilities")
  
class Scan(Base):
  __tablename__ = 'scans'
  id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
  start_time = Column(DateTime, nullable=False)
  end_time = Column(DateTime, nullable=False)
  status = Column(Enum("success", "failure", name="scan_statuses"), nullable=False)
  type = Column(Enum("sast", name="scan_types"), nullable=False)

  analyzer_id = Column(UUID(as_uuid=True), ForeignKey('analyzers.id'))
  analyzer = relationship("Analyzer", back_populates="scans")

  scanner_id = Column(UUID(as_uuid=True), ForeignKey('scanners.id'))
  scanner = relationship("Scanner", back_populates="scans")

  security_report_id = Column(UUID(as_uuid=True), ForeignKey('security_reports.id'))
  security_report = relationship("SecurityReport", back_populates="scan")
  
  messages = relationship("Communication", back_populates="scan")
  options = relationship("ConfigurationOption", back_populates="scan")
  primary_identifiers = relationship("Identifier", back_populates="scan")

class Remediation(Base):
  __tablename__ = 'remediations'
  id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
  summary = Column(String, nullable=False)
  diff = Column(String, nullable=False)

  fixes = relationship("VulnerabilityIdentifier", back_populates="remediation")
  
  security_report_id = Column(UUID(as_uuid=True), ForeignKey('security_reports.id'))
  security_report = relationship("SecurityReport", back_populates="remediations")

class VulnerabilityIdentifier(Base):
  __tablename__ = 'vulnerability_identifiers'
  id = Column(UUID(as_uuid=True), ForeignKey('vulnerabilities.id'), primary_key=True)
  vulnerability = relationship("Vulnerability", back_populates="vulnerability_identifier")

  remediation_id = Column(UUID(as_uuid=True), ForeignKey('remediations.id'))
  remediation = relationship("Remediation", back_populates="fixes")

class SecurityReport(Base, mixin.TrackTime):
  __tablename__ = 'security_reports'
  id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
  version = Column(String, default="15.0.7")
  report_schema = Column(String, default="https://gitlab.com/gitlab-org/security-products/security-report-schemas/-/blob/master/dist/sast-report-format.json")

  job_id = Column(Integer, ForeignKey('jobs.id'))
  job = relationship("Job", back_populates="security_report")

  scan = relationship("Scan", back_populates="security_report", uselist=False)
  vulnerabilities = relationship("Vulnerability", back_populates="security_report")
  remediations = relationship("Remediation", back_populates="security_report")
