from typing import Optional
from uuid import UUID
from datetime import datetime
from sqlalchemy.orm import Session

from app.database.crud.base import get_or_create
from app.database.models import report as models
from app.database.schemas import report_base as base_schemas
from app.database.schemas import report_full as full_schemas
from app.database.crud.detection import get_job_by_gl_job_id


def create_db_communication(
        db: Session,
        level: base_schemas.CommunicationLevels,
        value: str,
        scan: models.Scan
) -> full_schemas.Communication:
    db_communication = models.Communication(level=level, value=value, scan=scan)
    db.add(db_communication)
    db.commit()
    db.refresh(db_communication)
    return db_communication


def create_db_configuration_option(
        db: Session,
        name: str,
        value: str,
        source: base_schemas.ConfigSources,
        scan: full_schemas.Scan
) -> full_schemas.ConfigurationOption:
    db_configuration_option = models.ConfigurationOption(name=name, value=value, source=source, scan=scan)
    db.add(db_configuration_option)
    db.commit()
    db.refresh(db_configuration_option)
    return db_configuration_option


def get_or_create_db_identifier(
        db: Session,
        type: str,
        name: str,
        value: str,
        url: Optional[str]
) -> full_schemas.Identifier:
    db_identifier = get_or_create(db=db, model=models.Identifier, type=type, name=name, value=value, url=url)
    return db_identifier


def get_or_create_db_vendor(
        db: Session,
        name: str
) -> full_schemas.Vendor:
    db_vendor = get_or_create(db=db, model=models.Vendor, name=name)
    return db_vendor


def get_or_create_db_cvss_vector(
        db: Session,
        vector: str,
        vendor: models.Vendor
) -> full_schemas.CVSSVector:
    db_cvss_vector = get_or_create(db=db, model=models.CVSSVector, vector=vector, vendor_name=vendor.name)
    return db_cvss_vector


def get_or_create_db_link(
        db: Session,
        url: str,
        name: Optional[str]
) -> full_schemas.Link:
    db_link = get_or_create(db=db, model=models.Link, url=url, name=name)
    return db_link


def create_db_location(
        db: Session,
        file: Optional[str],
        start_line: Optional[int],
        end_line: Optional[int],
        class_name: Optional[str],
        method_name: Optional[str]
) -> full_schemas.Location:
    db_location = models.Location(file=file, start_line=start_line, end_line=end_line, class_name=class_name,
                                  method_name=method_name)
    db.add(db_location)
    db.commit()
    db.refresh(db_location)
    return db_location


def create_db_flag(
        db: Session,
        type: base_schemas.FlagTypes,
        origin: str,
        description: str
) -> full_schemas.Flag:
    db_flag = models.Flag(type=type, origin=origin, description=description)
    db.add(db_flag)
    db.commit()
    db.refresh(db_flag)
    return db_flag


def create_db_vulnerability(
        db: Session,
        id: UUID,
        identifiers: list[models.Identifier],
        location: models.Location,
        name: Optional[str],
        description: Optional[str],
        severity: Optional[base_schemas.SeverityLevels],
        solution: Optional[str],
        cvss_vectors: list[models.CVSSVector],
        links: Optional[list[models.Link]],
        flags: Optional[list[models.Flag]],
        raw_source_code_extract: Optional[str]
) -> full_schemas.Vulnerability:
    links = [] if links is None else links
    flags = [] if flags is None else flags
    db_vulnerability = models.Vulnerability(
        id=id,
        identifiers=identifiers,
        location=location,
        name=name,
        description=description,
        severity=severity,
        solution=solution,
        cvss_vectors=cvss_vectors,
        links=links,
        flags=flags,
        raw_source_code_extract=raw_source_code_extract
    )
    db.add(db_vulnerability)
    db.commit()
    db.refresh(db_vulnerability)
    db_vulnerability_identifier = models.VulnerabilityIdentifier(vulnerability=db_vulnerability)
    db.add(db_vulnerability_identifier)
    db.commit()
    db.refresh(db_vulnerability)
    return db_vulnerability


def get_or_create_db_analyzer(
        db: Session,
        id: UUID,
        name: str,
        version: str,
        vendor: models.Vendor,
        url: Optional[str]
) -> full_schemas.Analyzer:
    db_analyzer = get_or_create(db=db, model=models.Analyzer, id=id, name=name, version=version, vendor=vendor, url=url)
    return db_analyzer


def get_or_create_db_scanner(
        db: Session,
        id: UUID,
        name: str,
        version: str,
        vendor: models.Vendor,
        url: Optional[str]
) -> full_schemas.Scanner:
    db_scanner = get_or_create(db=db, model=models.Scanner, id=id, name=name, version=version, vendor=vendor, url=url)
    return db_scanner


def create_db_scan(
        db: Session,
        analyzer: models.Analyzer,
        start_time: datetime,
        end_time: datetime,
        scanner: models.Scanner,
        status: base_schemas.ScanStatuses,
        type: base_schemas.ScanTypes,
        # messages: Optional[list[models.Communication]],
        # options: Optional[list[models.ConfigurationOption]],
        # primary_identifiers: Optional[list[models.Identifier]]
) -> full_schemas.Scan:
    db_scan = models.Scan(
        analyzer=analyzer, start_time=start_time, end_time=end_time, scanner=scanner, status=status, type=type
    )
    db.add(db_scan)
    db.commit()
    db.refresh(db_scan)
    return db_scan


def create_db_remediation(
        db: Session,
        summary: str,
        diff: str,
        fixes: list[models.VulnerabilityIdentifier]
) -> full_schemas.Remediation:
    db_vulnerability_identifiers = [
        db.query(models.VulnerabilityIdentifier).filter(models.VulnerabilityIdentifier.id == vi.id).one_or_none() for vi
        in fixes
    ]
    db_remediation = models.Remediation(summary=summary, diff=diff, fixes=db_vulnerability_identifiers)
    db.add(db_remediation)
    db.commit()
    db.refresh(db_remediation)
    return db_remediation


def create_db_security_report(
        db: Session,
        scan: models.Scan,
        vulnerabilities: list[models.Vulnerability],
        remediations: Optional[list[models.Remediation]],
        gl_job_id: int
) -> full_schemas.SecurityReport:
    remediations = [] if remediations is None else remediations
    db_job = get_job_by_gl_job_id(db=db, gl_job_id=gl_job_id)
    db_security_report = models.SecurityReport(scan=scan, vulnerabilities=vulnerabilities, remediations=remediations,
                                               job=db_job)
    db.add(db_security_report)
    db.commit()
    db.refresh(db_security_report)
    return db_security_report
