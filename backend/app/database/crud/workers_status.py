from typing import Optional, TypeAlias, Literal
from uuid import uuid4
from sqlalchemy.orm import Session

from app.database.models import workers_status as models
from app.database.models.detection import Job
from app.database.schemas import workers_status as schemas
from app.database.crud.base import get_or_create

SortOrders: TypeAlias = Literal[
    None,
    "job_id_desc",
    "job_id_asc",
    "gl_job_id_desc",
    "gl_job_id_asc",
    "created_at_desc",
    "created_at_asc",
    "updated_at_desc",
    "updated_at_asc",
]


def check_status_scan_job_exists_by_query_id(db: Session, gl_job_id: Optional[str] = None,
                                             db_job_id: Optional[str] = None) -> bool:
    query = db.query(models.StatusScanJob).join(Job)
    if gl_job_id:
        return query.filter(Job.gl_job_id == gl_job_id).one_or_none() is not None
    return query.filter(models.StatusScanJob.job_id == db_job_id).one_or_none() is not None


def get_status_scan_job_by_db_job_id(db: Session, db_job_id: int) -> Optional[schemas.StatusScanJob]:
    return db.query(models.StatusScanJob).filter(models.StatusScanJob.job_id == db_job_id).one_or_none()


def get_status_scan_job_by_gl_job_id(db: Session, gl_job_id: str) -> Optional[schemas.StatusScanJob]:
    return db.query(models.StatusScanJob).join(Job).filter(Job.gl_job_id == gl_job_id).one_or_none()


def get_all_status_scan_jobs_by_overall_status(
        db: Session,
        overall_status: Optional[list[schemas.TaskStatuses]] = None,
        limit: Optional[int] = None,
        sort: Optional[SortOrders] = None,
) -> list[schemas.StatusScanJob]:
    query = db.query(models.StatusScanJob).join(Job)

    if overall_status is not None:
        query = query.filter(models.StatusScanJob.overall_status.in_(overall_status))

    if sort == "job_id_desc" or sort is None:
        query = query.order_by(Job.id.desc())
    elif sort == "job_id_asc":
        query = query.order_by(Job.id.asc())
    elif sort == "gl_job_id_desc":
        query = query.order_by(Job.gl_job_id.desc())
    elif sort == "gl_job_id_asc":
        query = query.order_by(Job.gl_job_id.asc())
    elif sort == "created_at_desc":
        query = query.order_by(models.StatusScanJob.created_at.desc())
    elif sort == "created_at_asc":
        query = query.order_by(models.StatusScanJob.created_at.asc())
    elif sort == "updated_at_desc":
        query = query.order_by(models.StatusScanJob.updated_at.desc())
    elif sort == "updated_at_asc":
        query = query.order_by(models.StatusScanJob.updated_at.asc())

    if not limit is None:
        return query.limit(limit).all()
    return query.all()


def create_status_scan_job(db: Session, status_scan_job: schemas.StatusScanJobCreate) -> schemas.StatusScanJob:
    db_status_scan_job = get_or_create(db=db, model=models.StatusScanJob, job_id=status_scan_job.job_id)
    for attr, value in status_scan_job.model_dump(exclude_unset=True).items():
        setattr(db_status_scan_job, attr, value)
    db.commit()
    db.refresh(db_status_scan_job)
    return db_status_scan_job


def update_status_scan_job_by_db_job_id(db: Session, status_scan_job: schemas.StatusScanJobUpdate, db_job_id: int) -> \
Optional[schemas.StatusScanJob]:
    db_status_scan_job = db.query(models.StatusScanJob).filter(models.StatusScanJob.job_id == db_job_id).one_or_none()
    if db_status_scan_job is None:
        return None
    for attr, value in status_scan_job.model_dump(exclude_unset=True).items():
        setattr(db_status_scan_job, attr, value)
    db.commit()
    db.refresh(db_status_scan_job)
    return db_status_scan_job
