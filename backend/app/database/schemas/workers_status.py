from uuid import UUID
from typing import TypeAlias, Literal, Optional
from pydantic import BaseModel, Field
from pydantic_settings import SettingsConfigDict

from app.database.schemas.detection import Job

TaskStatuses: TypeAlias = Literal["not_started", "in_progress", "success", "failure"]
class StatusScanJobBase(BaseModel):
  db_get_job_task: TaskStatuses = Field(default="not_started")
  gitlab_get_related_files_task: TaskStatuses = Field(default="not_started")
  scan_run_task: TaskStatuses = Field(default="not_started")
  db_create_and_save_task: TaskStatuses = Field(default="not_started")
  gitlab_trigger_job_task: TaskStatuses = Field(default="not_started")
  overall_status: TaskStatuses = Field(default="not_started")
  remarks: Optional[str] = Field(default=None)

class StatusScanJobUpdate(StatusScanJobBase):
  db_get_job_task: Optional[TaskStatuses] = Field(default=None)
  gitlab_get_related_files_task: Optional[TaskStatuses] = Field(default=None)
  scan_run_task: Optional[TaskStatuses] = Field(default=None)
  db_create_and_save_task: Optional[TaskStatuses] = Field(default=None)
  gitlab_trigger_job_task: Optional[TaskStatuses] = Field(default=None)
  overall_status: Optional[TaskStatuses] = Field(default=None)
  remarks: Optional[str] = Field(default=None)

class StatusScanJobCreate(StatusScanJobBase):
  job_id: int

class StatusScanJob(StatusScanJobBase):
  model_config = SettingsConfigDict(from_attributes=True)

  job_id: int
  job: Job
  id: UUID