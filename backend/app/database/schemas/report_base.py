from uuid import UUID, uuid4
from typing import Optional, Literal, TypeAlias
from datetime import datetime
from pydantic import BaseModel, Field, field_validator
from pydantic_settings import SettingsConfigDict

"""Schemas in this file contain the exact attributes required for GitLab to consume the eventual Security Report artifact, hence base.
"""
class ReportBase(BaseModel):
  model_config = SettingsConfigDict(from_attributes=True)

CommunicationLevels: TypeAlias = Literal["info", "warn", "fatal"]
class Communication(ReportBase):
  """Communication intended for the initiator of a scan.
  
  Attributes:
    level     Describes the severity of the communication. Use info to communicate normal scan behaviour; warn to communicate a potentially recoverable problem, or a partial error; fatal to communicate an issue that causes the scan to halt.
    value     The message to communicate.
  """
  level: CommunicationLevels
  value: str

ConfigSources: TypeAlias = Literal["argument", "file", "env_variable", "other"]
class ConfigurationOption(ReportBase):
  """A configuration option used for this scan.
  
  Attributes:
    name      The configuration option name. 
    value     The value used for this scan.
    source    Optional. The source of this option. 
  """
  name: str
  value: bool | int | str | None
  source: Optional[ConfigSources] = None

class Vendor(ReportBase):
  """Object defining a vendor.
  
  Attributes:
    name     The name of the vendor.
  """
  name: str

class Analyzer(ReportBase):
  """Object defining the analyzer used to perform the scan. Analyzers typically delegate to an underlying scanner to run the scan.
  
  Attributes:
    id        Unique id that identifies the analyzer.
    name      A human readable value that identifies the analyzer, not required to be unique.
    version   The version of the analyzer.
    vendor    The vendor/maintainer of the analyzer.
    url       Optional. A link to more information about the analyzer.
  """
  id: UUID = Field(default_factory=lambda: uuid4())
  name: str
  version: str
  vendor: Vendor
  url: Optional[str] = Field(None, pattern=r'^https?://.+')

class Scanner(ReportBase):
  """Object defining the scanner used to perform the scan.
  
  Attributes:
    id          Unique id that identifies the scanner.
    name        A human readable value that identifies the scanner, not required to be unique.
    version     The version of the scanner.
    vendor      The vendor/maintainer of the scanner.
    url         Optional. A link to more information about the scanner.
  """
  id: UUID = Field(default_factory=lambda: uuid4())
  name: str
  version: str
  vendor: Vendor
  url: Optional[str] = Field(None, pattern=r'^https?://.+')

class Identifier(ReportBase):
  """Primary identifiers for which the analyzer may return results.

  Attributes:
    type    For example, cve, cwe, osvdb, usn, or an analyzer-dependent type such as gemnasium.
    name    Human-readable name of the identifier.
    value   Value of the identifier, for matching purpose.
    url     Optional. URL of the identifier's documentation.
  """
  type: str
  name: str
  value: str
  url: Optional[str] = Field(None, pattern=r'^(https?|ftp)://.+')

class CVSSVector(ReportBase):
  """Object defining a CVSS Vector.

  Attributes:
    vendor    
    vector    
  """
  vendor_name: str = Field(serialization_alias="vendor")
  vector: str

class Link(ReportBase):
  """Object defining a link. Reference to external documentation or articles.

  Attributes:
    url     URL of the vulnerability details document.
    name    Name of the vulnerability details link.
  """
  url: str = Field(pattern=r'^(https?|ftp)://.+')
  name: Optional[str] = None

# class TrackingItemSignature(ReportBase):
#   algorithm: str
#   value: str

# class TrackingItem(ReportBase):
#   signatures: list[TrackingItemSignature]
#   file: Optional[str] = None
#   start_line: Optional[int] = None
#   end_line: Optional[int] = None

class Location(ReportBase):
  """Object defining location.

  Attribites:
    file          Path to the file where the vulnerability is located.
    start_line    The first line of the code affected by the vulnerability.
    end_line      The last line of the code affected by the vulnerability.
    class         Provides the name of the class where the vulnerability is located.
    method        Provides the name of the method where the vulnerability is located.
  """
  file: Optional[str] = None
  start_line: Optional[int] = None
  end_line: Optional[int] = None
  class_name: Optional[str] = None
  method_name: Optional[str] = None

FlagTypes: TypeAlias = Literal["flagged-as-likely-false-positive"]
class Flag(ReportBase):
  """Informational flags identified and assigned to a vulnerability.

  Attributes:
    type          Result of the scan.
    origin        Tool that issued the flag.
    description   What the flag is about.
  """
  type: FlagTypes
  origin: str
  description: str

SeverityLevels: TypeAlias = Literal["Info", "Unknown", "Low", "Medium", "High", "Critical"]
class Vulnerability(ReportBase):
  """Describes the vulnerability using GitLab Flavored Markdown.

  Attributes:
    id                            Unique identifier of the vulnerability. This is recommended to be a UUID.
    identifiers                   An ordered array of references that identify a vulnerability on internal or external databases. The first identifier is the Primary Identifier, which has special meaning.
    location                      Identifies the vulnerability's location.
    name                          Optional. The name of the vulnerability. This must not include the finding's specific information.
    description                   Optional. A long text section describing the vulnerability more fully.
    severity                       Optional. How much the vulnerability impacts the software. Possible values are Info, Unknown, Low, Medium, High, or Critical. Note that some analyzers may not report all these possible values.
    solution                      Optional. Explanation of how to fix the vulnerability.
    cvss_vectors                  Optional. An ordered array of CVSS vectors, each issued by a vendor to rate the vulnerability. The first item in the array is used as the primary CVSS vector, and is used to filter and sort the vulnerability
    links                         Optional. An array of references to external documentation or articles that describe the vulnerability.
    flags                         Optional. Flags that can be attached to vulnerabilities.
    raw_source_code_extract       Optional. Provides an unsanitized excerpt of the affected source code.
    details                       Optional. To be implemented.
    tracking                      Optional. To be implemented.
  """
  id: UUID = Field(default_factory=lambda: uuid4())
  name: Optional[str] = None
  description: Optional[str] = Field(None, max_length=1048576)
  severity: Optional[SeverityLevels] = None
  solution: Optional[str] = Field(None, max_length=7000)
  raw_source_code_extract: Optional[str] = None
  identifiers: list[Identifier]
  links: Optional[list[Link]] = None
  location: Location
  flags: Optional[list[Flag]] = None
  cvss_vectors: Optional[list[CVSSVector]] = None
  # details: Optional[dict] = None
  # tracking: Optional[TrackingItem] = None

ScanStatuses: TypeAlias = Literal["success", "failure"]
ScanTypes: TypeAlias = Literal["sast"]
class Scan(ReportBase):
  """Object defining a scan.

  Attributes:
    analyzer                Object defining the analyzer used to perform the scan. Analyzers typically delegate to an underlying scanner to run the scan.
    start_time              ISO8601 UTC value with format yyyy-mm-ddThh:mm:ss, representing when the scan started.
    end_time                ISO8601 UTC value with format yyyy-mm-ddThh:mm:ss, representing when the scan finished.
    scanner                 Object defining the scanner used to perform the scan
    status                  Result of the scan.
    type                    Type of the scan.
    messages                Optional. Array of communication intended for the initiator of a scan.
    options                 Optional. Array of configuration options used for this scan.
    primary_identifiers     An unordered array containing an exhaustive list of primary identifiers for which the analyzer may return results.
  """
  analyzer: Analyzer
  start_time: datetime
  end_time: datetime 
  scanner: Scanner 
  status: ScanStatuses
  type: ScanTypes = "sast"
  messages: Optional[list[Communication]] = None
  options: Optional[list[ConfigurationOption]] = None
  primary_identifiers: Optional[list[Identifier]] = None

  @field_validator('start_time', 'end_time', mode="before")
  def format_datetime(cls, value):
    return value.strftime("%Y-%m-%d %H:%M:%S") if isinstance(value, datetime) else value

class VulnerabilityIdentifier(ReportBase):
  """Object defining the unique identifier for vulnerabilities.

  Attributes:
    id        Unique identifier of the vulnerability. This is recommended to be a UUID.
  """
  id: UUID

class Remediation(ReportBase):
  """Object defining a remidiation.

  Attributes:
    fixes       An array of vulnerability ids that represent references to vulnerabilities fixed by this remediation
    summary     An overview of how the vulnerabilities were fixed.
    diff        A base64-encoded remediation code diff, compatible with git apply. 
  """
  fixes: list[VulnerabilityIdentifier]
  summary: str
  diff: str

class SecurityReport(ReportBase): 
  """Security report object adhering to GitLab Security Report schema outlined.

  Attributes:
    version             The version of the schema to which the JSON report conforms.
    scan                Object defining scan data.
    vulnerabilities     Array of vulnerability objects.
    remediations        An array of objects containing information on available remediations, along with patch diffs to apply.
    schema              URI pointing to the validating security report schema. (Deprecated)
  """
  version: str = Field("15.0.7", pattern=r'^[0-9]+\.[0-9]+\.[0-9]+$')
  scan: Scan
  vulnerabilities: list[Vulnerability]
  remediations: Optional[list[Remediation]] = None