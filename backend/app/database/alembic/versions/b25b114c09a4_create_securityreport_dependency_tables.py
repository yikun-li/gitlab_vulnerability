"""Create SecurityReport dependency tables

Revision ID: b25b114c09a4
Revises: 7750a8439334
Create Date: 2024-05-21 18:51:07.548026

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'b25b114c09a4'
down_revision: Union[str, None] = '7750a8439334'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('links',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('url', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_links'))
    )
    op.create_table('vendors',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_vendors')),
    sa.UniqueConstraint('name', name=op.f('uq_vendors_name'))
    )
    op.create_table('analyzers',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('version', sa.String(), nullable=False),
    sa.Column('url', sa.String(), nullable=True),
    sa.Column('vendor_id', sa.UUID(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_analyzers'))
    )
    op.create_table('cvss_vectors',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('vector', sa.String(), nullable=False),
    sa.Column('vendor_name', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_cvss_vectors'))
    )
    op.create_table('scanners',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('version', sa.String(), nullable=False),
    sa.Column('url', sa.String(), nullable=True),
    sa.Column('vendor_id', sa.UUID(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_scanners'))
    )
    op.create_table('security_reports',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('version', sa.String(), nullable=True),
    sa.Column('report_schema', sa.String(), nullable=True),
    sa.Column('job_id', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_security_reports'))
    )
    op.create_table('remediations',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('summary', sa.String(), nullable=False),
    sa.Column('diff', sa.String(), nullable=False),
    sa.Column('security_report_id', sa.UUID(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_remediations'))
    )
    op.create_table('scans',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('start_time', sa.DateTime(), nullable=False),
    sa.Column('end_time', sa.DateTime(), nullable=False),
    sa.Column('status', sa.Enum('success', 'failure', name='scan_statuses'), nullable=False),
    sa.Column('type', sa.Enum('sast', name='scan_types'), nullable=False),
    sa.Column('analyzer_id', sa.UUID(), nullable=True),
    sa.Column('scanner_id', sa.UUID(), nullable=True),
    sa.Column('security_report_id', sa.UUID(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_scans'))
    )
    op.create_table('vulnerabilities',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('severity', sa.Enum('Info', 'Unknown', 'Low', 'Medium', 'High', 'Critical', name='severity_levels'), nullable=True),
    sa.Column('solution', sa.String(), nullable=True),
    sa.Column('raw_source_code_extract', sa.String(), nullable=True),
    sa.Column('security_report_id', sa.UUID(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_vulnerabilities'))
    )
    op.create_table('communications',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('level', sa.Enum('info', 'warn', 'fatal', name='communication_levels'), nullable=True),
    sa.Column('value', sa.String(), nullable=False),
    sa.Column('scan_id', sa.UUID(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_communications'))
    )
    op.create_table('configuration_options',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('value', sa.String(), nullable=True),
    sa.Column('source', sa.Enum('argument', 'file', 'env_variable', 'other', name='config_sources'), nullable=True),
    sa.Column('scan_id', sa.UUID(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_configuration_options'))
    )
    op.create_table('flags',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('type', sa.Enum('flagged-as-likely-false-positive', name='flag_types'), nullable=True),
    sa.Column('origin', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=False),
    sa.Column('vulnerability_id', sa.UUID(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_flags'))
    )
    op.create_table('identifiers',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('type', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('value', sa.String(), nullable=False),
    sa.Column('url', sa.String(), nullable=True),
    sa.Column('scan_id', sa.UUID(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_identifiers'))
    )
    op.create_table('locations',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('file', sa.String(), nullable=True),
    sa.Column('start_line', sa.Integer(), nullable=True),
    sa.Column('end_line', sa.Integer(), nullable=True),
    sa.Column('class_name', sa.String(), nullable=True),
    sa.Column('method_name', sa.String(), nullable=True),
    sa.Column('vulnerability_id', sa.UUID(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_locations'))
    )
    op.create_table('vulnerability_cvss_vector_association',
    sa.Column('cvss_vectors_id', sa.UUID(), nullable=False),
    sa.Column('vulnerabilities_id', sa.UUID(), nullable=False),
    sa.PrimaryKeyConstraint('cvss_vectors_id', 'vulnerabilities_id', name=op.f('pk_vulnerability_cvss_vector_association'))
    )
    op.create_table('vulnerability_identifiers',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('remediation_id', sa.UUID(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_vulnerability_identifiers'))
    )
    op.create_table('vulnerability_link_association',
    sa.Column('links_id', sa.UUID(), nullable=False),
    sa.Column('vulnerabilities_id', sa.UUID(), nullable=False),
    sa.PrimaryKeyConstraint('links_id', 'vulnerabilities_id', name=op.f('pk_vulnerability_link_association'))
    )
    op.create_table('vulnerability_identifier_association',
    sa.Column('identifiers_id', sa.UUID(), nullable=False),
    sa.Column('vulnerabilities_id', sa.UUID(), nullable=False),
    sa.PrimaryKeyConstraint('identifiers_id', 'vulnerabilities_id', name=op.f('pk_vulnerability_identifier_association'))
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('vulnerability_identifier_association')
    op.drop_table('vulnerability_link_association')
    op.drop_table('vulnerability_identifiers')
    op.drop_table('vulnerability_cvss_vector_association')
    op.drop_table('locations')
    op.drop_table('identifiers')
    op.drop_table('flags')
    op.execute("DROP TYPE IF EXISTS flag_types CASCADE")
    op.drop_table('vulnerabilities')
    op.execute("DROP TYPE IF EXISTS severity_levels CASCADE")
    op.drop_table('scanners')
    op.drop_table('remediations')
    op.drop_table('cvss_vectors')
    op.drop_table('configuration_options')
    op.execute("DROP TYPE IF EXISTS config_sources CASCADE")
    op.drop_table('communications')
    op.execute("DROP TYPE IF EXISTS communication_levels CASCADE")
    op.drop_table('analyzers')
    op.drop_table('vendors')
    op.drop_table('security_reports')
    op.drop_table('scans')
    op.execute("DROP TYPE IF EXISTS scan_statuses CASCADE")
    op.execute("DROP TYPE IF EXISTS scan_types CASCADE")
    op.drop_table('links')
    # ### end Alembic commands ###
