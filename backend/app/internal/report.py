from typing import Tuple, Optional
from sqlalchemy.orm import Session
from datetime import datetime
from uuid import UUID, uuid4

from app.database.schemas import report_base as base_schemas
from app.database.schemas import report_full as full_schemas
from app.database.crud import report as crud


async def create_and_save(
        db: Session,
        success: bool,
        start_time: datetime,
        end_time: datetime,
        analyzer_metadata: base_schemas.Analyzer,
        scanner_metadata: base_schemas.Scanner,
        vulnerabilities: list[base_schemas.Vulnerability],
        remediations: list[base_schemas.Remediation],
        gl_job_id: str
) -> Tuple[bool, Optional[full_schemas.SecurityReport]]:
    scan = base_schemas.Scan(
        analyzer=analyzer_metadata,
        start_time=start_time,
        end_time=end_time,
        scanner=scanner_metadata,
        status="success" if success else "failure",
        type="sast"
    )
    db_security_report = crud.create_security_report(
        db=db,
        scan=scan,
        vulnerabilities=vulnerabilities,
        remediations=remediations,
        gl_job_id=gl_job_id
    )
    return True, db_security_report


def create_vulnerability_schema(
        type: str,
        type_value: str,
        type_url: str,
        name: str,
        description: str,
        severity: str,
        location_file: str,
        location_start_line: int,
        location_end_line: int,
        cvss_vector_vector: str,
        cvss_vector_vendor_name: str,
) -> base_schemas.Vulnerability:
    return base_schemas.Vulnerability(
        id=uuid4(),
        location=base_schemas.Location(
            file=location_file,
            start_line=location_start_line,
            end_line=location_end_line
        ),
        identifiers=[
            base_schemas.Identifier(
                type=type,
                name=f"{type.upper()}-{type_value}",
                value=type_value,
                url=type_url
            )
        ],
        name=name,
        description=description,
        severity=severity,
        cvss_vectors=[
            base_schemas.CVSSVector(
                vector=cvss_vector_vector,
                vendor_name=cvss_vector_vendor_name
            )
        ]
    )


def create_remediation_schema(
        vulnerability_identifiers: list[UUID],
        summary: str,
        diff: str,
) -> base_schemas.Remediation:
    fixes = [base_schemas.VulnerabilityIdentifier(id=vi) for vi in vulnerability_identifiers]
    return base_schemas.Remediation(
        fixes=fixes,
        summary=summary,
        diff=diff
    )


def create_scanner_schema(
        id: UUID,
        name: str,
        version: str,
        url: str,
        vendor_name: str,
) -> base_schemas.Scanner:
    return base_schemas.Scanner(
        id=id,
        name=name,
        version=version,
        url=url,
        vendor=base_schemas.Vendor(
            name=vendor_name
        )
    )


def create_analyzer_schema(
        id: UUID,
        name: str,
        version: str,
        url: str,
        vendor_name: str,
) -> base_schemas.Analyzer:
    return base_schemas.Analyzer(
        id=id,
        name=name,
        version=version,
        url=url,
        vendor=base_schemas.Vendor(
            name=vendor_name
        )
    )
