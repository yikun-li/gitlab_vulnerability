import os
from typing import Generator
import pytest
import alembic
from alembic.config import Config
from fastapi import FastAPI
from fastapi.testclient import TestClient
from sqlalchemy import create_engine
from sqlalchemy.orm import Session, sessionmaker
from aioresponses import aioresponses

from app.config.base import clear_settings_cache, get_settings
from app.database.dependency import get_db

from tests.factories import FACTORIES

@pytest.fixture(scope="session")
def apply_migrations() -> Generator[None, None, None]:
  os.environ["TESTING"] = "1"
  clear_settings_cache()

  config = Config("alembic.ini")
  alembic.command.upgrade(config, "head")
  yield
  # alembic.command.downgrade(config, "base") # Don't need to downgrade since we DROP database when test session starts

@pytest.fixture(scope="session")
def TestingSessionLocal() -> Generator[Session, None, None]:
  engine = create_engine(f"{get_settings().DB_URL_TEST}")  
  return sessionmaker(
    autocommit=False,
    autoflush=False,
    bind=engine
  )

@pytest.fixture
def testing_db_session(apply_migrations: None, TestingSessionLocal: Session) -> Generator[Session, None, None]:
  session = TestingSessionLocal()
  try:
    yield session
  finally:
    session.close()

@pytest.fixture(autouse=True)
def set_session_for_factories(testing_db_session: Generator[Session, None, None]) -> None:
  for factory in FACTORIES:
    factory._meta.sqlalchemy_session = testing_db_session

@pytest.fixture
def mock_aioresponse() -> Generator[aioresponses, None, None]:
  with aioresponses() as m:
    yield m

@pytest.fixture
def app() -> FastAPI:
  from app.main import get_application

  return get_application()

@pytest.fixture
def client(testing_db_session: Generator[Session, None, None], app: FastAPI) -> Generator[TestClient, None, None]:
  def override_get_db():
    try:
      yield testing_db_session
    finally:
      testing_db_session.close()
  
  app.dependency_overrides[get_db] = override_get_db
  client = TestClient(app)
  yield client

  app.dependency_overrides.clear()
  
  