from sqlalchemy.orm import Session
import random
from faker import Faker

from app.database.crud.workers_status import (
    check_status_scan_job_exists_by_query_id,
    get_status_scan_job_by_db_job_id,
    get_status_scan_job_by_gl_job_id,
    get_all_status_scan_jobs_by_overall_status,
    create_status_scan_job,
    update_status_scan_job_by_db_job_id,
)
from app.database.schemas import workers_status as schemas
from app.database.schemas.workers_status import TaskStatuses

from tests.factories.detection import JobFactory
from tests.factories import workers_status as workers_factories
from tests.utils.assertion import assert_attributes


def test_check_status_scan_job_exists_by_query_id_found(testing_db_session: Session) -> None:
    db_status_scan_job = workers_factories.StatusScanJobFactory()
    assert check_status_scan_job_exists_by_query_id(db=testing_db_session,
                                                    gl_job_id=db_status_scan_job.job.gl_job_id) == True
    assert check_status_scan_job_exists_by_query_id(db=testing_db_session, db_job_id=db_status_scan_job.job_id) == True


def test_check_status_scan_job_exists_by_query_id_not_found(testing_db_session: Session) -> None:
    assert check_status_scan_job_exists_by_query_id(db=testing_db_session, gl_job_id=0) == False
    assert check_status_scan_job_exists_by_query_id(db=testing_db_session, db_job_id=0) == False


def test_get_status_scan_job_by_db_job_id(testing_db_session: Session) -> None:
    db_job = JobFactory()
    db_status_scan_job = workers_factories.StatusScanJobFactory(job=db_job)
    tally_status_scan_job = get_status_scan_job_by_db_job_id(db=testing_db_session, db_job_id=db_job.id)
    assert db_status_scan_job.id == tally_status_scan_job.id
    assert db_status_scan_job.db_get_job_task == tally_status_scan_job.db_get_job_task
    assert db_status_scan_job.gitlab_get_related_files_task == tally_status_scan_job.gitlab_get_related_files_task
    assert db_status_scan_job.scan_run_task == tally_status_scan_job.scan_run_task
    assert db_status_scan_job.db_create_and_save_task == tally_status_scan_job.db_create_and_save_task
    assert db_status_scan_job.gitlab_trigger_job_task == tally_status_scan_job.gitlab_trigger_job_task
    assert db_status_scan_job.overall_status == tally_status_scan_job.overall_status
    assert db_status_scan_job.remarks == tally_status_scan_job.remarks


def test_get_status_scan_job_by_gl_job_id(testing_db_session: Session) -> None:
    db_job = JobFactory()
    db_status_scan_job = workers_factories.StatusScanJobFactory(job=db_job)
    tally_status_scan_job = get_status_scan_job_by_gl_job_id(db=testing_db_session, gl_job_id=db_job.gl_job_id)
    assert db_status_scan_job.id == tally_status_scan_job.id
    assert db_status_scan_job.db_get_job_task == tally_status_scan_job.db_get_job_task
    assert db_status_scan_job.gitlab_get_related_files_task == tally_status_scan_job.gitlab_get_related_files_task
    assert db_status_scan_job.scan_run_task == tally_status_scan_job.scan_run_task
    assert db_status_scan_job.db_create_and_save_task == tally_status_scan_job.db_create_and_save_task
    assert db_status_scan_job.gitlab_trigger_job_task == tally_status_scan_job.gitlab_trigger_job_task
    assert db_status_scan_job.overall_status == tally_status_scan_job.overall_status
    assert db_status_scan_job.remarks == tally_status_scan_job.remarks


def test_get_all_status_scan_jobs_by_overall_status(testing_db_session: Session) -> None:
    test_overall_status = random.choice(TaskStatuses.__args__)
    total_gen_scan_jobs = random.randint(1, 10)
    gen_scan_jobs = [workers_factories.StatusScanJobFactory(overall_status=test_overall_status) for _ in
                     range(total_gen_scan_jobs)]
    tally_scan_jobs = sorted(gen_scan_jobs, key=lambda scan: scan.job.id, reverse=True)

    db_scan_jobs = get_all_status_scan_jobs_by_overall_status(
        db=testing_db_session,
        overall_status=[test_overall_status],
        limit=total_gen_scan_jobs,
        sort="job_id_desc",
    )

    for tally_status_scan_job, db_status_scan_job in zip(tally_scan_jobs, db_scan_jobs):
        assert str(tally_status_scan_job.id) == str(db_status_scan_job.id)


def test_create_default_status_scan_job(testing_db_session: Session) -> None:
    db_job = JobFactory()
    status_scan_job_schema = schemas.StatusScanJobCreate(job_id=db_job.id)
    init_db_status_scan_job = create_status_scan_job(db=testing_db_session, status_scan_job=status_scan_job_schema)
    assert hasattr(init_db_status_scan_job, "id")
    assert_attributes(db_object=init_db_status_scan_job, attrs=status_scan_job_schema.model_dump(), excl=["job"])
    assert init_db_status_scan_job.job == db_job

    duplicate_db_status_scan_job = create_status_scan_job(db=testing_db_session, status_scan_job=status_scan_job_schema)
    assert duplicate_db_status_scan_job.id == init_db_status_scan_job.id


def test_create_status_scan_job_with_data(testing_db_session: Session) -> None:
    db_job = JobFactory()
    status_scan_job_schema = schemas.StatusScanJobCreate(
        job_id=db_job.id,
        db_get_job_task="success",
        gitlab_get_related_files_task="in_progress",
        overall_status="in_progress",
    )
    init_db_status_scan_job = create_status_scan_job(db=testing_db_session, status_scan_job=status_scan_job_schema)
    assert hasattr(init_db_status_scan_job, "id")
    assert_attributes(db_object=init_db_status_scan_job, attrs=status_scan_job_schema.model_dump(), excl=["job"])
    assert init_db_status_scan_job.job == db_job

    duplicate_db_status_scan_job = create_status_scan_job(db=testing_db_session, status_scan_job=status_scan_job_schema)
    assert duplicate_db_status_scan_job.id == init_db_status_scan_job.id


def test_update_status_scan_job_by_db_job_id(testing_db_session: Session) -> None:
    fake = Faker()
    db_job = JobFactory()
    attrs = {
        "db_get_job_task": "not_started",
        "gitlab_get_related_files_task": "in_progress",
        "scan_run_task": "not_started",
        "db_create_and_save_task": "not_started",
        "gitlab_trigger_job_task": "not_started",
        "overall_status": "in_progress",
        "remarks": fake.sentence(nb_words=10),
    }
    db_status_scan_job = workers_factories.StatusScanJobFactory(job=db_job)
    updated_status_scan_job_schema = schemas.StatusScanJobUpdate(
        gitlab_get_related_files_task=attrs["gitlab_get_related_files_task"],
        overall_status=attrs["overall_status"],
        remarks=attrs["remarks"]
    )
    updated_db_status_scan_job = update_status_scan_job_by_db_job_id(db=testing_db_session,
                                                                     status_scan_job=updated_status_scan_job_schema,
                                                                     db_job_id=db_job.id)

    assert updated_db_status_scan_job.id == db_status_scan_job.id
    assert updated_db_status_scan_job.job_id == db_job.id
    assert_attributes(db_object=updated_db_status_scan_job, attrs=attrs)
