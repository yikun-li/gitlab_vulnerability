import random
from uuid import uuid4
from sqlalchemy.orm import Session
from faker import Faker
from datetime import datetime, timedelta

from app.database.crud.report_base import (
    create_db_communication,
    create_db_configuration_option,
    get_or_create_db_identifier,
    get_or_create_db_vendor,
    get_or_create_db_cvss_vector,
    get_or_create_db_link,
    create_db_location,
    create_db_flag,
    create_db_vulnerability,
    get_or_create_db_analyzer,
    get_or_create_db_scanner,
    create_db_scan,
    create_db_remediation,
    create_db_security_report
)
from app.database.schemas import report_base as schemas

from tests.factories.detection import JobFactory
from tests.factories import report as report_factories
from tests.utils.assertion import assert_attributes


def test_create_db_communication(testing_db_session: Session) -> None:
    fake = Faker()
    attrs = {
        "level": random.choice(schemas.CommunicationLevels.__args__),
        "value": fake.sentence(nb_words=10),
        "scan": report_factories.ScanFactory(),
    }

    db_communication = create_db_communication(
        db=testing_db_session,
        **attrs
    )
    assert hasattr(db_communication, "id")
    assert_attributes(db_object=db_communication, attrs=attrs)


def test_create_db_configuration_option(testing_db_session: Session) -> None:
    fake = Faker()
    attrs = {
        "name": fake.name(),
        "value": f"{random.uniform(0, 1)}",
        "source": random.choice(schemas.ConfigSources.__args__),
        "scan": report_factories.ScanFactory()
    }

    db_configuration_option = create_db_configuration_option(
        db=testing_db_session,
        **attrs
    )
    assert hasattr(db_configuration_option, "id")
    assert_attributes(db_object=db_configuration_option, attrs=attrs, excl=["scan"])
    assert attrs["scan"].options[0].id == db_configuration_option.id


def test_get_or_create_db_identifier(testing_db_session: Session) -> None:
    fake = Faker()
    attrs = {
        "type": fake.name(),
        "name": fake.name(),
        "value": f"{fake.random_number(digits=3)}",
        "url": fake.url(),
    }
    init_db_identifier = get_or_create_db_identifier(
        db=testing_db_session,
        **attrs
    )
    assert hasattr(init_db_identifier, "id")
    assert_attributes(db_object=init_db_identifier, attrs=attrs)

    duplicate_db_identifier = get_or_create_db_identifier(
        db=testing_db_session,
        **attrs
    )
    assert duplicate_db_identifier.id == init_db_identifier.id


def test_get_or_create_db_vendor(testing_db_session: Session) -> None:
    fake = Faker()
    attrs = {
        "name": fake.name()
    }
    init_db_vendor = get_or_create_db_vendor(
        db=testing_db_session,
        **attrs
    )
    assert hasattr(init_db_vendor, "id")
    assert_attributes(db_object=init_db_vendor, attrs=attrs)

    duplicate_db_vendor = get_or_create_db_vendor(
        db=testing_db_session,
        **attrs
    )
    assert duplicate_db_vendor.id == init_db_vendor.id


def test_get_or_create_db_cvss_vector(testing_db_session: Session) -> None:
    fake = Faker()
    attrs = {
        "vector": fake.name(),
        "vendor": report_factories.VendorFactory()
    }
    init_db_cvss_vector = get_or_create_db_cvss_vector(
        db=testing_db_session,
        **attrs
    )
    assert hasattr(init_db_cvss_vector, "id")
    assert_attributes(db_object=init_db_cvss_vector, attrs=attrs)

    duplicate_db_cvss_vector = get_or_create_db_cvss_vector(
        db=testing_db_session,
        **attrs
    )
    assert duplicate_db_cvss_vector.id == init_db_cvss_vector.id


def test_get_or_create_db_link(testing_db_session: Session) -> None:
    fake = Faker()
    attrs = {
        "url": fake.url(),
        "name": fake.name()
    }
    init_db_link = get_or_create_db_link(
        db=testing_db_session,
        **attrs
    )
    assert hasattr(init_db_link, "id")
    assert_attributes(db_object=init_db_link, attrs=attrs)

    duplicate_db_link = get_or_create_db_link(
        db=testing_db_session,
        **attrs
    )
    assert duplicate_db_link.id == init_db_link.id


def test_create_db_location(testing_db_session: Session) -> None:
    fake = Faker()
    attrs = {
        "file": fake.file_name(),
        "start_line": random.randint(1, 5),
        "end_line": random.randint(5, 10),
        "class_name": fake.first_name(),
        "method_name": fake.last_name(),
    }
    db_location = create_db_location(
        db=testing_db_session,
        **attrs
    )
    assert hasattr(db_location, "id")
    assert_attributes(db_object=db_location, attrs=attrs)


def test_create_db_flag(testing_db_session: Session) -> None:
    fake = Faker()
    attrs = {
        "type": random.choice(schemas.FlagTypes.__args__),
        "origin": fake.name(),
        "description": fake.sentence(nb_words=10),
    }
    db_flag = create_db_flag(
        db=testing_db_session,
        **attrs
    )
    assert hasattr(db_flag, "id")
    assert_attributes(db_object=db_flag, attrs=attrs)


def test_create_db_vulnerability(testing_db_session: Session) -> None:
    fake = Faker()
    attrs = {
        "id": uuid4(),
        "identifiers": [report_factories.IdentifierFactory() for _ in range(3)],
        "location": report_factories.LocationFactory(),
        "name": fake.name(),
        "description": fake.sentence(nb_words=10),
        "severity": random.choice(schemas.SeverityLevels.__args__),
        "solution": fake.sentence(nb_words=10),
        "cvss_vectors": [report_factories.CVSSVectorFactory() for _ in range(3)],
        "links": [report_factories.LinkFactory() for _ in range(3)],
        "flags": [report_factories.FlagFactory() for _ in range(3)],
        "raw_source_code_extract": fake.sentence(),
    }
    db_vulnerability = create_db_vulnerability(
        db=testing_db_session,
        **attrs
    )
    assert hasattr(db_vulnerability, "vulnerability_identifier")
    assert_attributes(db_object=db_vulnerability, attrs=attrs)


def test_get_or_create_db_analyzer(testing_db_session: Session) -> None:
    fake = Faker()
    attrs = {
        "id": uuid4(),
        "name": fake.name(),
        "version": f"{random.uniform(0, 10)}",
        "vendor": report_factories.VendorFactory(),
        "url": fake.url(),
    }
    init_db_analyzer = get_or_create_db_analyzer(
        db=testing_db_session,
        **attrs
    )
    assert_attributes(db_object=init_db_analyzer, attrs=attrs)
    duplicate_db_analyzer = get_or_create_db_analyzer(
        db=testing_db_session,
        **attrs
    )
    assert duplicate_db_analyzer.id == init_db_analyzer.id


def test_get_or_create_db_scanner(testing_db_session: Session) -> None:
    fake = Faker()
    attrs = {
        "id": uuid4(),
        "name": fake.name(),
        "version": f"{random.uniform(0, 10)}",
        "vendor": report_factories.VendorFactory(),
        "url": fake.url(),
    }
    init_db_scanner = get_or_create_db_scanner(
        db=testing_db_session,
        **attrs
    )
    assert_attributes(db_object=init_db_scanner, attrs=attrs)

    duplicate_db_scanner = get_or_create_db_scanner(
        db=testing_db_session,
        **attrs
    )
    assert duplicate_db_scanner.id == init_db_scanner.id


def test_create_db_scan(testing_db_session: Session) -> None:
    fake = Faker()
    attrs = {
        "analyzer": report_factories.AnalyzerFactory(),
        "start_time": datetime.now(),
        "end_time": datetime.now() + timedelta(minutes=random.uniform(0, 10)),
        "scanner": report_factories.ScannerFactory(),
        "status": random.choice(schemas.ScanStatuses.__args__),
        "type": random.choice(schemas.ScanTypes.__args__),
    }
    db_scan = create_db_scan(
        db=testing_db_session,
        **attrs
    )
    assert hasattr(db_scan, "id")
    assert_attributes(db_object=db_scan, attrs=attrs)


def test_create_db_remediation(testing_db_session: Session) -> None:
    fake = Faker()
    attrs = {
        "summary": fake.sentence(nb_words=10),
        "diff": fake.sentence(),
        "fixes": [
            report_factories.VulnerabilityIdentifierFactory(vulnerability=report_factories.VulnerabilityFactory())
            for _ in range(3)
        ],
    }
    db_remediation = create_db_remediation(
        db=testing_db_session,
        **attrs
    )
    assert hasattr(db_remediation, "id")
    assert_attributes(db_object=db_remediation, attrs=attrs)
    assert all(db_remediation.id == db_vi.remediation_id for db_vi in attrs["fixes"])


def test_create_db_security_report(testing_db_session: Session) -> None:
    job = JobFactory()
    vulnerabilities_identifiers = [report_factories.VulnerabilityIdentifierFactory() for _ in range(3)]
    attrs = {
        "scan": report_factories.ScanFactory(),
        "vulnerabilities": [vi.vulnerability for vi in vulnerabilities_identifiers],
        "remediations": [vi.remediation for vi in vulnerabilities_identifiers],
        "gl_job_id": job.gl_job_id
    }
    db_security_report = create_db_security_report(
        db=testing_db_session,
        **attrs
    )
    assert hasattr(db_security_report, "id")
    assert db_security_report.job_id == job.id
    assert db_security_report.version == "15.0.7"
    assert db_security_report.report_schema == "https://gitlab.com/gitlab-org/security-products/security-report-schemas/-/blob/master/dist/sast-report-format.json"
    assert_attributes(db_object=db_security_report, attrs=attrs, excl=["gl_job_id"])
