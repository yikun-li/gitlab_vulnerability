import random
import pytest
from datetime import datetime, timedelta
from sqlalchemy.orm import Session
from faker import Faker

from app.internal.report import (
    create_and_save,
    create_vulnerability_schema,
    create_remediation_schema,
    create_scanner_schema,
    create_analyzer_schema,
)
from app.database.schemas import report_base as base_schemas

from tests.factories.detection import JobFactory
from tests.factories import report as report_factories
from tests.factories.utils import generate_without_commit
from tests.utils.assertion import assert_attributes


@pytest.mark.asyncio
async def test_create_and_save(testing_db_session: Session):
    job = JobFactory()

    with generate_without_commit():
        vulnerabilities = [report_factories.VulnerabilityFactory() for _ in range(random.randint(0, 3))]
        remediations = [
            report_factories.RemediationFactory(fixes=[
                report_factories.VulnerabilityIdentifierFactory(id=vulnerability.id, vulnerability=vulnerability)
            ])
            for vulnerability in vulnerabilities
        ]
        attrs = {
            "success": random.choice([True, False]),
            "start_time": datetime.now(),
            "end_time": datetime.now() + timedelta(minutes=random.uniform(0, 10)),
            "analyzer_metadata": base_schemas.Analyzer.model_validate(report_factories.AnalyzerFactory()),
            "scanner_metadata": base_schemas.Analyzer.model_validate(report_factories.ScannerFactory()),
            "vulnerabilities": [base_schemas.Vulnerability.model_validate(v) for v in vulnerabilities],
            "remediations": [base_schemas.Remediation.model_validate(r) for r in remediations],
            "gl_job_id": job.gl_job_id
        }
    success, db_security_report = await create_and_save(
        db=testing_db_session,
        **attrs
    )
    assert success
    assert hasattr(db_security_report, "id")
    assert db_security_report.scan.start_time == attrs["start_time"].replace(microsecond=0)
    assert db_security_report.scan.end_time == attrs["end_time"].replace(microsecond=0)
    assert hasattr(db_security_report.scan.analyzer, "id")
    assert db_security_report.scan.analyzer.name == attrs["analyzer_metadata"].name
    assert db_security_report.scan.analyzer.version == attrs["analyzer_metadata"].version
    assert db_security_report.scan.analyzer.vendor.name == attrs["analyzer_metadata"].vendor.name
    assert db_security_report.scan.scanner.name == attrs["scanner_metadata"].name
    assert db_security_report.scan.scanner.version == attrs["scanner_metadata"].version
    assert db_security_report.scan.scanner.vendor.name == attrs["scanner_metadata"].vendor.name
    assert db_security_report.scan.status == "success" if attrs["success"] else "failure"
    assert len(db_security_report.vulnerabilities) == len(attrs["vulnerabilities"])
    assert len(db_security_report.remediations) == len(attrs["remediations"])
    assert db_security_report.job_id == job.id


def test_create_vulnerability_schema():
    fake = Faker()
    attrs = {
        "type": fake.name(),
        "type_value": f"{fake.random_number(digits=3)}",
        "type_url": fake.url(),
        "name": fake.name(),
        "description": fake.sentence(nb_words=10),
        "severity": random.choice(base_schemas.SeverityLevels.__args__),
        "location_file": fake.file_name(),
        "location_start_line": random.randint(1, 5),
        "location_end_line": random.randint(5, 10),
        "cvss_vector_vector": fake.name(),
        "cvss_vector_vendor_name": fake.uuid4(),
    }
    vulnerability_schema = create_vulnerability_schema(**attrs)
    assert_attributes(
        db_object=vulnerability_schema,
        attrs=attrs,
        excl=["type", "type_value", "type_url", "location_file", "location_start_line", "location_end_line",
              "cvss_vector_vector", "cvss_vector_vendor_name"]
    )
    assert hasattr(vulnerability_schema, "id")
    assert vulnerability_schema.location.file == attrs["location_file"]
    assert vulnerability_schema.location.start_line == attrs["location_start_line"]
    assert vulnerability_schema.location.end_line == attrs["location_end_line"]
    assert vulnerability_schema.identifiers[0].type == attrs["type"]
    assert vulnerability_schema.identifiers[0].name == f"{attrs['type'].upper()}-{attrs['type_value']}"
    assert vulnerability_schema.identifiers[0].value == attrs["type_value"]
    assert vulnerability_schema.identifiers[0].url == attrs["type_url"]
    assert vulnerability_schema.cvss_vectors[0].vector == attrs["cvss_vector_vector"]
    assert vulnerability_schema.cvss_vectors[0].vendor_name == attrs["cvss_vector_vendor_name"]


def test_create_remediation_schema():
    fake = Faker()
    fixes = [fake.uuid4() for _ in range(1, random.randint(1, 3))]
    attrs = {
        "vulnerability_identifiers": fixes,
        "summary": fake.sentence(nb_words=10),
        "diff": fake.sentence(nb_words=10),
    }
    remediation_schema = create_remediation_schema(**attrs)
    assert_attributes(
        db_object=remediation_schema,
        attrs=attrs,
        excl=["vulnerability_identifiers"]
    )
    for tally_fix_id, v_identifier in zip(fixes, remediation_schema.fixes):
        assert tally_fix_id == str(v_identifier.id)


def test_create_scanner_schema():
    fake = Faker()
    attrs = {
        "id": fake.uuid4(),
        "name": fake.name(),
        "version": f"{random.uniform(0, 10)}",
        "url": fake.url(),
        "vendor_name": fake.name()
    }
    scanner_schema = create_scanner_schema(**attrs)
    assert_attributes(
        db_object=scanner_schema,
        attrs=attrs,
        excl=["vendor_name"]
    )
    assert scanner_schema.vendor.name == attrs["vendor_name"]


def test_create_analyzer_schema():
    fake = Faker()
    attrs = {
        "id": fake.uuid4(),
        "name": fake.name(),
        "version": f"{random.uniform(0, 10)}",
        "url": fake.url(),
        "vendor_name": fake.name()
    }
    analyzer_schema = create_analyzer_schema(**attrs)
    assert_attributes(
        db_object=analyzer_schema,
        attrs=attrs,
        excl=["vendor_name"]
    )
    assert analyzer_schema.vendor.name == attrs["vendor_name"]
