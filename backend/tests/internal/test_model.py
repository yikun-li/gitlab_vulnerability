import pytest
from faker import Faker
from datetime import datetime

from app.internal.model import (
    run,
    mock_scan,
)
from app.database.schemas.gitlab import FileContent
from app.database.schemas import report_base as base_schemas


@pytest.mark.asyncio
async def test_run():
    fake = Faker()
    files: list[FileContent] = [
        FileContent(path=fake.file_path(), content=fake.sentence(nb_words=10).encode("utf-8"))
        for _ in range(5)
    ]
    success, start_time, end_time, scanner_metadata, analyzer_metadata, vulnerabilities, remediations = await run(
        files=files)
    assert success
    assert type(start_time) == datetime
    assert type(end_time) == datetime
    assert isinstance(scanner_metadata, base_schemas.Scanner)
    assert isinstance(analyzer_metadata, base_schemas.Analyzer)
    assert len(vulnerabilities) == len(files)
    for v in vulnerabilities:
        assert isinstance(v, base_schemas.Vulnerability)


@pytest.mark.asyncio
async def test_mock_scan():
    fake = Faker()
    files: list[FileContent] = [
        FileContent(path=fake.file_path(), content=fake.sentence(nb_words=10).encode("utf-8"))
        for _ in range(5)
    ]
    success, vulnerabilities, remediations = await mock_scan(files=files)

    sorted_vulnerabilities = sorted(vulnerabilities, key=lambda v: v.location.file)
    sorted_files = sorted(files, key=lambda f: f.path)
    assert success
    for v, f in zip(sorted_vulnerabilities, sorted_files):
        assert v.location.file == f.path

    vulnerability_ids = [str(v.id) for v in vulnerabilities]
    for r in remediations:
        for v_identifier in r.fixes:
            assert str(v_identifier.id) in vulnerability_ids
