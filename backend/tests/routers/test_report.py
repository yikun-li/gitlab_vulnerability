from fastapi.testclient import TestClient
from starlette.status import (
    HTTP_200_OK,
    HTTP_400_BAD_REQUEST,
    HTTP_404_NOT_FOUND,
)
from uuid import uuid4

from app.config.app import settings

from app.routers.report import REPORT_API_PREFIX
from tests.factories.detection import JobFactory
from tests.factories.report import SecurityReportFactory


def test_get_full_report_by_query_gl_job_id_success(client: TestClient) -> None:
    job = JobFactory()
    security_report = SecurityReportFactory(job=job)
    test_endpoint = f"{settings.API_VERSION_PREFIX}{REPORT_API_PREFIX}/gl/get_by_query_id"
    test_gl_job_id_query_response = client.get(
        test_endpoint,
        params={
            "gl_job_id": job.gl_job_id
        }
    )
    test_gl_job_id_query_content = test_gl_job_id_query_response.json()
    assert test_gl_job_id_query_response.status_code == HTTP_200_OK
    assert not "id" in test_gl_job_id_query_content
    assert not "created_at" in test_gl_job_id_query_content
    assert not "updated_at" in test_gl_job_id_query_content
    assert not "job" in test_gl_job_id_query_content
    assert not "job_id" in test_gl_job_id_query_content
    assert not "report_schema" in test_gl_job_id_query_content
    assert test_gl_job_id_query_content["version"] == "15.0.7"
    assert "scan" in test_gl_job_id_query_content
    assert "analyzer" in test_gl_job_id_query_content["scan"]
    assert "scanner" in test_gl_job_id_query_content["scan"]
    assert "vulnerabilities" in test_gl_job_id_query_content
    assert len(test_gl_job_id_query_content["vulnerabilities"]) == 5
    assert "remediations" in test_gl_job_id_query_content
    assert len(test_gl_job_id_query_content["remediations"]) == 5


def test_get_full_report_by_query_db_job_id_success(client: TestClient) -> None:
    job = JobFactory()
    security_report = SecurityReportFactory(job=job)
    test_endpoint = f"{settings.API_VERSION_PREFIX}{REPORT_API_PREFIX}/gl/get_by_query_id"
    test_db_job_id_query_response = client.get(
        test_endpoint,
        params={
            "db_job_id": job.id
        }
    )
    test_db_job_id_query_content = test_db_job_id_query_response.json()
    assert test_db_job_id_query_response.status_code == HTTP_200_OK
    assert not "id" in test_db_job_id_query_content
    assert not "created_at" in test_db_job_id_query_content
    assert not "updated_at" in test_db_job_id_query_content
    assert not "job" in test_db_job_id_query_content
    assert not "job_id" in test_db_job_id_query_content
    assert not "report_schema" in test_db_job_id_query_content
    assert test_db_job_id_query_content["version"] == "15.0.7"
    assert "scan" in test_db_job_id_query_content
    assert "analyzer" in test_db_job_id_query_content["scan"]
    assert "scanner" in test_db_job_id_query_content["scan"]
    assert "vulnerabilities" in test_db_job_id_query_content
    assert len(test_db_job_id_query_content["vulnerabilities"]) == 5
    assert "remediations" in test_db_job_id_query_content
    assert len(test_db_job_id_query_content["remediations"]) == 5


def test_get_gl_report_by_query_id_400_failure(client: TestClient) -> None:
    test_endpoint = f"{settings.API_VERSION_PREFIX}{REPORT_API_PREFIX}/gl/get_by_query_id"
    response = client.get(
        test_endpoint
    )
    content = response.json()
    assert response.status_code == HTTP_400_BAD_REQUEST
    assert content["detail"] == f"Please provide either a GitLab job id or a database job id"


def test_get_gl_report_by_query_id_404_failure(client: TestClient) -> None:
    test_failing_id = 0
    test_endpoint = f"{settings.API_VERSION_PREFIX}{REPORT_API_PREFIX}/gl/get_by_query_id"
    gl_job_id_query_response = client.get(
        test_endpoint,
        params={
            "gl_job_id": test_failing_id
        }
    )
    gl_job_id_query_content = gl_job_id_query_response.json()
    assert gl_job_id_query_response.status_code == HTTP_404_NOT_FOUND
    assert gl_job_id_query_content["detail"] == f"Security report with GitLab job id {test_failing_id} not found"

    db_job_id_query_response = client.get(
        test_endpoint,
        params={
            "db_job_id": test_failing_id
        }
    )
    db_job_id_query_content = db_job_id_query_response.json()
    assert db_job_id_query_response.status_code == HTTP_404_NOT_FOUND
    assert db_job_id_query_content["detail"] == f"Security report with job id {test_failing_id} not found"


def test_get_full_report_by_query_db_job_id_success(client: TestClient) -> None:
    job = JobFactory()
    security_report = SecurityReportFactory(job=job)
    test_endpoint = f"{settings.API_VERSION_PREFIX}{REPORT_API_PREFIX}/full/get_by_query_id"
    response = client.get(
        test_endpoint,
        params={
            "db_job_id": job.id
        }
    )
    content = response.json()
    assert response.status_code == HTTP_200_OK
    assert "id" in content
    assert "created_at" in content
    assert "updated_at" in content
    assert "job" in content
    assert "job_id" in content
    assert "report_schema" in content
    assert content["version"] == "15.0.7"
    assert "scan" in content
    assert "analyzer" in content["scan"]
    assert "scanner" in content["scan"]
    assert "vulnerabilities" in content
    assert len(content["vulnerabilities"]) == 5
    assert "remediations" in content
    assert len(content["remediations"]) == 5


def test_get_full_report_by_query_gl_job_id_success(client: TestClient) -> None:
    job = JobFactory()
    security_report = SecurityReportFactory(job=job)
    test_endpoint = f"{settings.API_VERSION_PREFIX}{REPORT_API_PREFIX}/full/get_by_query_id"
    response = client.get(
        test_endpoint,
        params={
            "gl_job_id": job.gl_job_id
        }
    )
    content = response.json()
    assert response.status_code == HTTP_200_OK
    assert "id" in content
    assert "created_at" in content
    assert "updated_at" in content
    assert "job" in content
    assert "job_id" in content
    assert "report_schema" in content
    assert content["version"] == "15.0.7"
    assert "scan" in content
    assert "analyzer" in content["scan"]
    assert "scanner" in content["scan"]
    assert "vulnerabilities" in content
    assert len(content["vulnerabilities"]) == 5
    assert "remediations" in content
    assert len(content["remediations"]) == 5


def test_get_full_report_by_query_id_400_failure(client: TestClient) -> None:
    job = JobFactory()
    security_report = SecurityReportFactory(job=job)
    test_endpoint = f"{settings.API_VERSION_PREFIX}{REPORT_API_PREFIX}/full/get_by_query_id"
    response = client.get(
        test_endpoint
    )
    content = response.json()
    assert response.status_code == HTTP_400_BAD_REQUEST
    assert content["detail"] == "Please provide either a GitLab job id or a database job id"


def test_get_full_report_by_query_id_404_failure(client: TestClient) -> None:
    test_failing_id = 0
    test_endpoint = f"{settings.API_VERSION_PREFIX}{REPORT_API_PREFIX}/full/get_by_query_id"
    gl_job_id_response = client.get(
        test_endpoint,
        params={
            "gl_job_id": test_failing_id
        }
    )
    gl_job_id_content = gl_job_id_response.json()
    assert gl_job_id_response.status_code == HTTP_404_NOT_FOUND
    assert gl_job_id_content["detail"] == f"Security report with GitLab job id {test_failing_id} not found"

    db_job_id_response = client.get(
        test_endpoint,
        params={
            "db_job_id": test_failing_id
        }
    )
    db_job_id_content = db_job_id_response.json()
    assert db_job_id_response.status_code == HTTP_404_NOT_FOUND
    assert db_job_id_content["detail"] == f"Security report with job id {test_failing_id} not found"
