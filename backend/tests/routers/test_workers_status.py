import math
import random
from fastapi.testclient import TestClient
from starlette.status import (
    HTTP_200_OK,
    HTTP_400_BAD_REQUEST,
)
from sqlalchemy.orm import Session

from app.config.app import settings
from app.database.models import workers_status as models
from app.database.schemas.workers_status import TaskStatuses
from app.routers.workers_status import WORKERS_STATUS_API_PREFIX

from tests.factories.workers_status import StatusScanJobFactory
from tests.factories.detection import JobFactory
from tests.utils.assertion import assert_attributes


def test_get_paginated_status_scan_jobs_success(client: TestClient, testing_db_session: Session):
    total_gen_scan_jobs = random.randint(1, 10)
    gen_scan_jobs = [StatusScanJobFactory(overall_status="success") for _ in range(total_gen_scan_jobs)]
    db_scan_jobs = testing_db_session.query(models.StatusScanJob).filter(
        models.StatusScanJob.overall_status == "success").order_by(models.StatusScanJob.job_id.desc()).all()

    current_page = 1
    page_size = random.randint(1, len(db_scan_jobs))
    test_endpoint = f"{settings.API_VERSION_PREFIX}{WORKERS_STATUS_API_PREFIX}/all/paginated?overall_status=success&page={current_page}&size={page_size}"
    response = client.get(
        test_endpoint
    )
    assert response.status_code == HTTP_200_OK
    content = response.json()
    assert content["total"] == len(db_scan_jobs)
    assert content["page"] == current_page
    assert content["size"] == page_size
    assert content["pages"] == math.ceil(len(db_scan_jobs) / page_size)
    for db_status_scan_job, response_status_scan_job in zip(db_scan_jobs[:page_size], content["items"]):
        assert str(db_status_scan_job.id) == str(response_status_scan_job["id"])
        assert response_status_scan_job["overall_status"] == "success"


def test_get_all_status_scan_jobs_by_overall_status_success(client: TestClient, testing_db_session: Session):
    test_overall_status = random.choice(TaskStatuses.__args__)
    total_gen_scan_jobs = random.randint(1, 10)
    gen_scan_jobs = [StatusScanJobFactory(overall_status=test_overall_status) for _ in range(total_gen_scan_jobs)]
    tally_scan_jobs_query = testing_db_session.query(models.StatusScanJob)
    tally_scan_jobs_query = tally_scan_jobs_query.filter(models.StatusScanJob.overall_status == test_overall_status)
    tally_scan_jobs = tally_scan_jobs_query.order_by(models.StatusScanJob.job_id.asc()).limit(total_gen_scan_jobs).all()

    test_endpoint = f"{settings.API_VERSION_PREFIX}{WORKERS_STATUS_API_PREFIX}/all/overall_status"
    response = client.get(
        test_endpoint,
        params={
            "overall_status": test_overall_status,
            "sort": "job_id_asc",
            "limit": total_gen_scan_jobs,
        }
    )
    assert response.status_code == HTTP_200_OK
    content = response.json()
    assert len(content) == len(tally_scan_jobs)
    for db_status_scan_job, response_status_scan_job in zip(tally_scan_jobs, content):
        assert str(db_status_scan_job.id) == str(response_status_scan_job["id"])


def test_get_status_scan_job_by_db_job_id_success(client: TestClient):
    total_scan_jobs = random.randint(2, 5)
    scan_jobs = [StatusScanJobFactory() for _ in range(total_scan_jobs)]
    target_scan_job_index = random.randint(1, total_scan_jobs) - 1
    target_scan_job = scan_jobs[target_scan_job_index]

    test_endpoint = f"{settings.API_VERSION_PREFIX}{WORKERS_STATUS_API_PREFIX}/get_by_db_job_id/{target_scan_job.job.id}"
    response = client.get(
        test_endpoint
    )
    assert response.status_code == HTTP_200_OK
    content = response.json()
    assert_attributes(db_object=target_scan_job, attrs=content, excl=["job"])


def test_get_status_scan_job_by_gl_job_id_success(client: TestClient):
    total_scan_jobs = random.randint(2, 5)
    scan_jobs = [StatusScanJobFactory() for _ in range(total_scan_jobs)]
    target_scan_job_index = random.randint(1, total_scan_jobs) - 1
    target_scan_job = scan_jobs[target_scan_job_index]

    test_endpoint = f"{settings.API_VERSION_PREFIX}{WORKERS_STATUS_API_PREFIX}/get_by_gl_job_id/{target_scan_job.job.gl_job_id}"
    response = client.get(
        test_endpoint
    )
    assert response.status_code == HTTP_200_OK
    content = response.json()
    assert_attributes(db_object=target_scan_job, attrs=content, excl=["job"])


def test_check_status_scan_job_exists_by_query_id_found_success(client: TestClient):
    db_scan_job = StatusScanJobFactory()
    test_gl_job_id_query_endpoint = f"{settings.API_VERSION_PREFIX}{WORKERS_STATUS_API_PREFIX}/check_exists_by_query_id"
    response = client.get(
        test_gl_job_id_query_endpoint,
        params={
            "gl_job_id": db_scan_job.job.gl_job_id
        }
    )
    assert response.status_code == HTTP_200_OK
    content = response.json()
    assert content == True

    test_db_job_id_query_endpoint = f"{settings.API_VERSION_PREFIX}{WORKERS_STATUS_API_PREFIX}/check_exists_by_query_id"
    response = client.get(
        test_gl_job_id_query_endpoint,
        params={
            "db_job_id": db_scan_job.job_id
        }
    )
    assert response.status_code == HTTP_200_OK
    content = response.json()
    assert content == True


def test_check_status_scan_job_exists_by_query_id_not_found_success(client: TestClient):
    test_id = 0
    test_gl_job_id_query_endpoint = f"{settings.API_VERSION_PREFIX}{WORKERS_STATUS_API_PREFIX}/check_exists_by_query_id"
    response = client.get(
        test_gl_job_id_query_endpoint,
        params={
            "gl_job_id": test_id
        }
    )
    assert response.status_code == HTTP_200_OK
    content = response.json()
    assert content == False

    test_db_job_id_query_endpoint = f"{settings.API_VERSION_PREFIX}{WORKERS_STATUS_API_PREFIX}/check_exists_by_query_id"
    response = client.get(
        test_gl_job_id_query_endpoint,
        params={
            "db_job_id": test_id
        }
    )
    assert response.status_code == HTTP_200_OK
    content = response.json()
    assert content == False


def test_check_status_scan_job_exists_by_query_id_400_failure(client: TestClient):
    test_gl_job_id_query_endpoint = f"{settings.API_VERSION_PREFIX}{WORKERS_STATUS_API_PREFIX}/check_exists_by_query_id"
    response = client.get(
        test_gl_job_id_query_endpoint,
    )
    assert response.status_code == HTTP_400_BAD_REQUEST
    content = response.json()
    assert content["detail"] == "Please provide either a GitLab job id or a database job id"
